---
title: "Study 2 Analysis"
author:
- name: Thomas E. Gorman
  url: https://tegorman13.github.io/
  affiliations: 
  - name:  Communication and Cognition Lab, Purdue University, USA
    affiliation-url: https://web.ics.purdue.edu/~treimer/
lightbox: true
toc: false
code-fold: true
code-tools: true
execute:
  #echo: false
  warning: false
cache: true
format:
  html: 
    grid:
      sidebar-width: 220px
      body-width: 1200px
      margin-width: 170px
      gutter-width: 1.0rem
  hugo-md:
    include: true
    html-math-method: mathjax
    output-file: s2_hugo.md
  gfm:
    echo: true
    output-file: s2_gfm.md
---



```{r}

library(pacman)
pacman::p_load(dplyr,purrr,tidyr,here, haven,tibble,ggplot2,gt,ggh4x,lme4,flextable,ggh4x)

options(digits=2, scipen=999, dplyr.summarise.inform=FALSE)
walk(c("fun_plot"), ~ source(here::here(paste0("Scripts/", .x, ".R"))))
theme_set(theme_nice())

#202009 

s2 <- haven::read_sav("data/Frequency & Probability Study 2 - 3-24-19.sav")
s2 <- s2 |> #mutate(id = as.numeric(format(EndDate, "%H%M%S"))) |> relocate(id) |> 
  mutate(id=paste0("s2_",row_number())) |> relocate(id)
s2 <- s2 |> filter(!(id=="s2_78")) # NA for some responses
s2 <- s2 |> 
  mutate(
    state1 = case_when(
      COLORADO == 1 ~ "Colorado",
      MASSACHUSETTS == 1 ~ "Massachusetts",
      CALIFORNIA == 1 ~ "California",
      TEXAS == 1 ~ "Texas",
      TRUE ~ NA_character_
    ),
    state2 = case_when(
      COLORADO == 2 ~ "Colorado",
      MASSACHUSETTS == 2 ~ "Massachusetts",
      CALIFORNIA == 2 ~ "California",
      TEXAS == 2 ~ "Texas",
      TRUE ~ NA_character_
    )
  ) |> 
  mutate(refClass = case_when(
  REFERENCECLASS == 1 ~ "USD",
  REFERENCECLASS == 2 ~ "kWh",
  REFERENCECLASS == 3 ~ "Percentage"
)) |> 
  rename(calc=MATH01) |>  # replace NA's in calc with 0's
  mutate(calc=factor(ifelse(is.na(calc),0,calc))) |> 
  mutate(calc = if_else(calc == 0, "No Calculator", "Calculator")) |> 
  relocate(refClass,state1,state2,calc, .after = id) 

s2 <- s2 |> rename(edu=DEM04) |>
  mutate(edu = factor(case_when(
    edu == '1' ~ "Some schooling, but no diploma or degree",
    edu == 2 ~ "Highschool diploma or GED",
    edu == 3 ~ "Some college",
    edu == 4 ~ "College degree",
    edu == 5 ~ "Some graduate school",
    edu == 6 ~ "Graduate degree",
    edu == 7 ~ "Choose not to answer",
    TRUE ~ NA_character_
  ))) |> relocate(edu, .after = id) 
```


```{r}
#| eval: false

s2_b1 <- s2 |> select(id,state1,refClass,TENPERCENT,ROUNDED, calc, edu,ACFAMILY1:TOTALAPTWO1) |> 
  mutate( 
    block = 1,
    state=state1,
  pct_goal=case_when (TENPERCENT == 1 ~ "10%", TENPERCENT == 2 ~ "15%"), 
  pct=case_when (TENPERCENT == 1 ~ .10, TENPERCENT == 2 ~ .15),
  rounded = case_when(ROUNDED == 1 ~ "Rounded", ROUNDED == 2 ~ "Not Rounded")
  ) |> relocate(id,block,refClass,pct_goal,rounded,state)  |> 
  select(-TENPERCENT,-ROUNDED, -state1)

s2_b2 <- s2 |> select(id,state2,refClass,TENPERCENT,ROUNDED, calc,edu,ACFAMILY2:TOTALAPTWO2) |> 
  mutate( 
    block = 2,
    state=state2,
  pct_goal=case_when (TENPERCENT == 1 ~ "15%", TENPERCENT == 2 ~ "10%"), 
  pct=case_when (TENPERCENT == 1 ~ .15, TENPERCENT == 2 ~ .10),
  rounded = case_when(ROUNDED == 1 ~ "Not Rounded", ROUNDED == 2 ~ "Rounded")
  ) |> relocate(id,block,refClass,pct_goal,rounded,state) |> 
  select(-TENPERCENT,-ROUNDED, -state2)

s2_b1_long <- s2_b1 |>
  pivot_longer(
    cols = c(ACFAMILY1:TOTALAPTWO1),
    names_to = c("appliance", "measure"),
    names_pattern = "(AC|HEAT|WATER|REFRIG|OTHER|TOTAL)(FAMILY1|STATE1|APONE1|APTWO1)",
    values_to = "value"
  ) |>
  pivot_wider(
    names_from = measure,
    values_from = value
  ) |>
  rename(
    family = FAMILY1,
    state_avg = STATE1,
    plan1 = APONE1,
    plan2 = APTWO1
  ) |>
  relocate(appliance, .after = refClass)

s2_b2_long <- s2_b2 |>
  pivot_longer(
    cols = c(ACFAMILY2:TOTALAPTWO2),
    names_to = c("appliance", "measure"),
    names_pattern = "(AC|HEAT|WATER|REFRIG|OTHER|TOTAL)(FAMILY2|STATE2|APONE2|APTWO2)",
    values_to = "value"
  ) |>
  pivot_wider(
    names_from = measure,
    values_from = value
  ) |>
  rename(
    family = FAMILY2,
    state_avg = STATE2,
    plan1 = APONE2,
    plan2 = APTWO2
  ) |>
  relocate(appliance, .after = refClass)


s2_long <- bind_rows(s2_b1_long, s2_b2_long) |> 
  arrange(id, block) 

# pivot so that plan1 and plan2 are on their own rows
s2_long <- s2_long |>
  group_by(id,block) |> 
  pivot_longer(
    cols = c(plan1, plan2),
    names_to = "plan",
    values_to = "value"
  ) |> 
  mutate(change = value-family, state_dif = value-state_avg,plan=as_factor(plan)) 


#write.csv(s2_long,"data/study_2_tg.csv")
saveRDS(s2_long, here::here("data/s2_processed.rds"))



```


```{r}


s2_long <- readRDS(here::here("data/s2_processed.rds"))

# compute total kWh reduction, and total % reduction 
s2_agg <- s2_long |> 
  filter(appliance !="TOTAL") |> 
  group_by(id,refClass,state,pct_goal,pct,rounded,block,plan,calc,edu) |> 
  summarise(total_kWh = sum(value),orig_kWh=sum(family), pct_change = round((orig_kWh-total_kWh)/orig_kWh,3), state_dif=mean(state_dif))


# Step 1: Calculate whether participants matched the target pct_goal
s2_agg <- s2_long |> 
  filter(appliance != "TOTAL") |> 
  group_by(id, refClass, state, pct_goal, pct, rounded, block, plan, calc, edu) |> 
  summarise(
    total_kWh = sum(value),
    orig_kWh = sum(family),
    pct_change = round((orig_kWh - total_kWh) / orig_kWh, 3),
    state_dif = mean(state_dif),
    .groups = "drop"
  ) |>
  mutate(matched_goal = (pct_change == pct),
  matched_goal2 = abs(pct_change-pct)<.03)


```



```{r}
s2_agg |> group_by(id,refClass) |> 
  summarise(mg=sum(matched_goal),n=n(), pct=mg/n) |> 
  group_by(refClass) |>
  summarise(mean_pct=mean(pct), sd_pct=sd(pct), n=n()) |> gt()

s2_agg |> group_by(id,refClass) |> 
  summarise(mg=sum(matched_goal),n=n(), pct=mg/n) |> 
  group_by(refClass,mg) |>
  summarise(n=n()) |> 
  rename("# matched goal"=mg,"# participants"=n) |> gt() |>  tab_header(
    title = md("**Number of Trials participants match goal by Reference class**"),
    subtitle = "Each participant had 4 trials where they attempt to create a plan to match goal"
  ) 



s2_agg |> group_by(id,refClass) |> 
  summarise(mg=sum(matched_goal),n=n(), pct=mg/n) |> 
  ggplot(aes(x=pct)) +
  geom_bar(aes(fill=refClass)) +
  ggdist::stat_halfeye() +
  geom_rug(alpha=0.1) +
  stat_boxplot(width=0.5, alpha=0.6) +
  facet_wrap(~refClass) +
  labs(title="Distributions of % of trials that matched goal",
       x="% of trials (out of 4) that matched goal",
       y="Number of Participants") +
  scale_fill_brewer(palette="Set2") + 
  scale_y_continuous(breaks=seq(0,80,5))  + 
  scale_x_continuous(breaks=seq(0,1,.25),labels=scales::percent_format(accuracy=1))


s2_agg |> group_by(id,refClass,pct_goal) |> 
  summarise(mg=sum(matched_goal),n=n(), pct=mg/n) |> 
  ggplot(aes(x=pct)) +
  geom_bar(aes(fill=refClass)) +
  ggdist::stat_halfeye() +
  geom_rug(alpha=0.1) +
  stat_boxplot(width=0.5, alpha=0.6) +
  facet_wrap(pct_goal~refClass) +
  labs(title="Distributions of % of trials that matched goal",
       x="% of trials (out of 2) that matched goal",
       y="Number of Participants") +
  scale_fill_brewer(palette="Set2") + 
  scale_y_continuous(breaks=seq(0,80,5))  + 
  scale_x_continuous(breaks=seq(0,1,.25),labels=scales::percent_format(accuracy=1))



```


## Inspect response distribution for outliers

```{r}

outliers <- s2_agg |>  ungroup() |> group_by(state) |> mutate(change_mean=mean(pct_change,na.rm=TRUE),change_sd=sd(pct_change,na.rm=TRUE),
                                     z_score=(pct_change-change_mean)/change_sd,
                                     is_outlier=abs(z_score)>3.0)

outlier_id <- outliers |> filter(is_outlier) |> pull(id) |> unique()

outlier_summary <- outliers %>%
  group_by(pct_goal, rounded, refClass,state) %>%
  summarise(
    num_outliers = sum(is_outlier, na.rm = TRUE),
    total = n(),
    outlier_percentage = (num_outliers / total) * 100
  )

outlier_plot <- ggplot(outliers, aes(x = state, y = z_score, color = is_outlier)) +
  geom_jitter(alpha = 0.5) +
  facet_wrap(~ pct_goal) +
  labs(
    title = "Z-Scores of Change in Energy Usage by State - outliers colored",
    x = "State",
    y = "Z-Score",
    color = "Outlier"
  ) +
  theme_minimal()

# Assess skewness and normality of the data
library(e1071)
# Calculate skewness and kurtosis for the `pct_change` variable
skewness_value <- skewness(s2_agg$pct_change, na.rm = TRUE)
kurtosis_value <- kurtosis(s2_agg$pct_change, na.rm = TRUE)

cat("Skewness:", skewness_value, "\n")
cat("Kurtosis:", kurtosis_value, "\n")


# Shapiro-Wilk test for normality (sample size limitation)
shapiro_test <- shapiro.test(s2_agg$pct_change[1:5000])  # Using first 5000 observations if large dataset
print(shapiro_test)
```



::: column-page-right

## Before and after excluding outliers

```{r}
#| layout-ncol: 1
#| fig.width: 9
#| fig.height: 6

#outlier_plot

s2_agg |> ggplot(aes(x=pct_change)) +
  geom_density(aes(fill=state), alpha=0.5) +
  ggdist::stat_halfeye() +
  geom_rug(alpha=0.1) +
  stat_boxplot(width=0.5, alpha=0.6) +
  facet_wrap(~refClass) +
  labs(title="Distribution of Percent Change by State and Reference Class - Before outlier exclusion",
       x="Percent Change",
       y="Density") +
  scale_fill_brewer(palette="Set2")

# plot densities in a better way to account for the positive skew

s2_agg <- s2_agg |> 
  filter(!id %in% outlier_id)

s2_agg |> 
  filter(!id %in% outlier_id) |>
  ggplot(aes(x=pct_change)) +
  geom_density(aes(fill=state), alpha=0.5) +
  ggdist::stat_halfeye() +
  geom_rug(alpha=0.1) +
  stat_boxplot(width=0.5, alpha=0.6) +
  facet_wrap(~refClass) +
  labs(title="After outlier exclusion",
       x="Percent Change",
       y="Density") +
  scale_fill_brewer(palette="Set2")


```

## Individual Participant responses

- Facets indicate the Reference class (%, kWh, USD) and the goal % reduction (10%, 15%)
- dashed lines also indicate goal percentage - dots on the line indicate participants who met the goal


```{r}
#| fig.width: 10
#| fig.height: 9

  # add geom_vline with x intercept based on pct_goal of the data (which is currently a string of form 10%)
s2_agg |> 
  filter(block==1) |>
  ungroup() |> 
  mutate(goal_pct = as.numeric(stringr::str_remove(pct_goal,"%"))/100) |>
  mutate(id=reorder(id,pct_change)) |> 
  ggplot(aes(y=id,x=pct_change)) + 
  geom_point(size=1,alpha=0.6,position = position_jitter(w=0, h=0.17)) +
  geom_vline(aes(xintercept=goal_pct),linetype="dashed",alpha=.5) +
  ggh4x::facet_nested_wrap(refClass~pct_goal,axes="all",scales="free",ncol=2)  + 
  labs(y="Participant Id", x="Percent Change", title="Individual Performance") +
  theme(axis.text.y = element_text(family = "Manrope Light", face = "plain", size = rel(0.7)))
```





## Interactive data table

```{r}
# plot distribution of reductions by applicance
# s2_long |> ggplot(aes(x = change)) + geom_histogram(bins = 30) + facet_wrap(~appliance, scales = "free")
s2_agg |> mutate(refClass=factor(refClass),pct_goal=factor(pct_goal),rounded=factor(rounded),state=factor(state)) |>
DT::datatable(extensions = 'Buttons',
  options = list(
    dom = 'Blfrtip',
    buttons = list('copy', 'csv', 'excel', 'pdf', 'print'),
    pageLength = 7,
    autoWidth = TRUE
  ),
  filter = 'top') # Add filtering at the top of each column)
#DT::datatable(sum1 |> group_by(id,block) |> summarise(diff(total_kWh),diff(orig_kWh)))
```
:::




## Looking at % of subjects who hit the target reduction

```{r}




# 203309



# Step 2: Summarize the percentage of participants meeting the goal for each condition
summary_pct <- s2_agg |>
  group_by(refClass, rounded, pct_goal) |>
  summarise(
    matched_count = sum(matched_goal),
    total_count = n(),
    pct_matched = matched_count / total_count * 100,
    .groups = "drop"
  )

# Step 3: Create plots for the percentage of subjects in each condition who matched the target pct
ggplot(summary_pct, aes(x = refClass, y = pct_matched, fill = rounded)) +
  geom_bar(stat = "identity", position = position_dodge()) +
  facet_wrap(~ pct_goal) +
  labs(
    title = "Percentage of Participants Matching Target Pct by Condition",
    x = "Reference Class",
    y = "Percentage Matched (%)",
    fill = "Rounding"
  ) +
  theme_minimal()


summary_pct |>
  gt() |>
  tab_header(
    title = md("**Percentage of Participants Matching Target Pct by Condition**"),
    subtitle = "Grouped by Reference Class, Rounding, and Pct Goal"
  ) |>
  fmt_number(
    columns = c(pct_matched),
    decimals = 2
  ) |>
  cols_label(
    refClass = "Reference Class",
    rounded = "Rounding",
    pct_goal = "Pct Goal",
    matched_count = "Matched Count",
    total_count = "Total Count",
    pct_matched = "Percentage Matched (%)"
  ) |>
  cols_align(
    align = "center",
    columns = everything()
  ) |>
  tab_spanner(
    label = "Participants",
    columns = c(matched_count, total_count, pct_matched)
  )

```





```{r}
#| layout-ncol: 2
#| fig.height: 10
#| fig.width: 12

# Step 1: Calculate whether participants matched the target pct_goal within different tolerances
sum1a <- s2_long |> 
  filter(appliance != "TOTAL") |> 
  group_by(id, refClass, state, pct_goal, pct, rounded, block, plan, calc, edu) |> 
  summarise(
    total_kWh = sum(value),
    orig_kWh = sum(family),
    pct_change = round((orig_kWh - total_kWh) / orig_kWh, 3),
    state_dif = mean(state_dif),
    .groups = "drop"
  ) |>
  mutate(
    target_pct = as.numeric(sub("%", "", pct_goal)) / 100,
    match_level = case_when(
      abs(pct_change - target_pct) <= 0.001 ~ "Exact Match",
      abs(pct_change - target_pct) <= 0.05 ~ "Within 5%",
      abs(pct_change - target_pct) <= 0.10 ~ "Within 10%",
      abs(pct_change - target_pct) <= 0.20 ~ "Within 20%",
      TRUE ~ "Over 20%"
    ),
    match_level = factor(match_level, levels = c("Exact Match", "Within 5%", "Within 10%", "Within 20%", "Over 20%"))
  )

# Step 2: Summarize the percentage of participants in each match level for each condition
summary_pct <- sum1a |>
  group_by(refClass, rounded, pct_goal, match_level) |>
  summarise(count = n(), .groups = "drop") |>
  group_by(refClass, rounded, pct_goal) |>
  mutate(
    total_count = sum(count),
    percentage = count / total_count * 100
  ) |>
  ungroup()

# Step 3: Create plot
ggplot(summary_pct, aes(x = interaction(refClass, rounded), y = percentage, fill = match_level)) +
  geom_bar(stat = "identity", position = "stack") +
  facet_wrap(~ pct_goal, scales = "free_x") +
  scale_fill_brewer(palette = "Set2") +
  labs(
    title = "Percentage of Participants by Match Level",
    subtitle = "Grouped by Reference Class, Rounding, and Pct Goal",
    x = "Reference Class and Rounding",
    y = "Percentage (%)",
    fill = "Match Level"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


ggplot(summary_pct, aes(x = refClass, y = percentage, fill = match_level)) +
  geom_bar(stat = "identity",position=position_dodge()) +
  facet_wrap(rounded ~ pct_goal, scales = "free_x") +
  scale_fill_brewer(palette = "Set2") +
  labs(
    title = "Percentage of Participants by Match Level",
    subtitle = "Grouped by Reference Class, Rounding, and Pct Goal",
    x = "Reference Class and Rounding",
    y = "Percentage (%)",
    fill = "Match Level"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```
## Cumulative plot

**Click on plots to enlarge**

```{r}
#| layout-ncol: 2
#| fig.height: 11
#| fig.width: 12

# Step 1: Calculate match levels with cumulative groups
sum1c <- s2_long |>
  filter(appliance != "TOTAL") |>
  group_by(id, refClass, state, pct_goal, pct, rounded, block, plan, calc, edu) |>
  summarise(
    total_kWh = sum(value),
    orig_kWh = sum(family),
    pct_change = round((orig_kWh - total_kWh) / orig_kWh, 3),
    state_dif = mean(state_dif),
    .groups = "drop"
  ) |>
  mutate(
    target_pct = as.numeric(sub("%", "", pct_goal)) / 100,
    match_level = case_when(
      abs(pct_change - target_pct) <= 0.001 ~ "Exact Match",
      abs(pct_change - target_pct) <= 0.05 ~ "Within 5%",
      abs(pct_change - target_pct) <= 0.10 ~ "Within 10%",
      abs(pct_change - target_pct) <= 0.20 ~ "Within 20%",
      TRUE ~ "Over 20%"
    ),
    match_level = factor(
      match_level, 
      levels = c("Exact Match", "Within 5%", "Within 10%", "Within 20%", "Over 20%")
    )
  )

# Step 2: Create cumulative groups for each match level
summary_pct <- sum1c |>
  group_by(refClass, rounded, pct_goal, match_level) |>
  summarise(count = n(), .groups = "drop") |>
  group_by(refClass, rounded, pct_goal) |>
  mutate(
    total_count = sum(count),
    cumulative_count = cumsum(count),
    cumulative_percentage = cumulative_count / total_count * 100
  ) |>
  ungroup()

# Step 3: Create a plot for cumulative percentages
ggplot(summary_pct, aes(x = refClass, y = cumulative_percentage, fill = match_level)) +
  geom_bar(stat = "identity", position = position_dodge()) +
  facet_wrap(pct_goal~rounded, scales = "free_x") +
  scale_fill_brewer(palette = "Set2") +
  labs(
    title = "Cumulative Percentage of Participants by Match Level",
    subtitle = "Grouped by Reference Class, Rounding, and Pct Goal",
    x = "Reference Class",
    y = "Cumulative Percentage (%)",
    fill = "Match Level"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


ggplot(summary_pct, aes(x = refClass, y = cumulative_percentage, fill = match_level)) +
  geom_bar(stat = "identity", position = position_dodge()) +
  facet_wrap(~rounded, scales = "free_x") +
  scale_fill_brewer(palette = "Set2") +
  labs(
    title = "Cumulative Percentage of Participants by Match Level",
    subtitle = "Grouped by Reference Class, Rounding, and Pct Goal",
    x = "Reference Class",
    y = "Cumulative Percentage (%)",
    fill = "Match Level"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


ggplot(summary_pct, aes(x = refClass, y = cumulative_percentage, fill = match_level)) +
  geom_bar(stat = "identity", position = position_dodge()) +
  scale_fill_brewer(palette = "Set2") +
  labs(
    title = "Cumulative Percentage of Participants by Match Level",
    subtitle = "Grouped by Reference Class, Rounding, and Pct Goal",
    x = "Reference Class",
    y = "Cumulative Percentage (%)",
    fill = "Match Level"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

ggplot(summary_pct, aes(x = rounded, y = cumulative_percentage, fill = match_level)) +
  geom_bar(stat = "identity", position = position_dodge()) +
  scale_fill_brewer(palette = "Set2") +
  labs(
    title = "Cumulative Percentage of Participants by Match Level",
    subtitle = "Grouped by Reference Class, Rounding, and Pct Goal",
    x = "Rounding",
    y = "Cumulative Percentage (%)",
    fill = "Match Level"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


```





## Main Effects and Interactions

**Click on plots to enlarge**


```{r}
#| layout-ncol: 2

s2_agg |> ggplot(aes(x = refClass, y = pct_change, fill = refClass)) + 
  stat_summary(fun = mean, geom = "bar", position="dodge") +
  stat_summary(fun.data = mean_se, geom = "errorbar", position = "dodge") +
  labs(
    title = "Effect of Reference Class",
    x = "Reference Class",
    y = "% Change",
    fill = "Reference Class"
  ) 


s2_agg |> ggplot(aes(x = pct_goal, y = pct_change, fill = pct_goal)) + 
  stat_summary(fun = mean, geom = "bar", position="dodge") +
  stat_summary(fun.data = mean_se, geom = "errorbar", position = "dodge") +
  labs(
    title = "Effect of Goal % Reduction",
    x = "Goal % Reduction",
    y = "% Change",
    fill = "Goal % Reduction"
  ) 

s2_agg |> ggplot(aes(x = rounded, y = pct_change, fill = rounded)) + 
  stat_summary(fun = mean, geom = "bar", position="dodge") +
  stat_summary(fun.data = mean_se, geom = "errorbar", position = "dodge") +
  labs(
    title = "Effect of Rounding",
    x = "Rounding",
    y = "% Change",
    fill = "Rounding"
  ) 




s2_agg |> ggplot(aes(x = pct_goal, y = pct_change, fill = refClass)) + 
  stat_summary(fun = mean, geom = "bar", position="dodge") +
  stat_summary(fun.data = mean_se, geom = "errorbar", position = "dodge") +
  labs(
    title = "Effect of Goal % Reduction and Reference Class",
    x = "Goal % Reduction",
    y = "% Change",
    fill= "Reference Class"
  ) 


 
s2_agg |> ggplot(aes(x = pct_goal, y = pct_change, fill = refClass)) + 
  stat_summary(fun = mean, geom = "bar", position="dodge") +
  stat_summary(fun.data = mean_se, geom = "errorbar", position = "dodge") + 
  facet_wrap(~state) +
  labs(
    title = "Effect of Goal % Reduction and Reference Class - Separated by State",
    x = "Goal % Reduction",
    y = "% Change",
    fill= "Reference Class"
  ) 
 



s2_agg |> ggplot(aes(x = pct_goal, y = pct_change, fill = rounded)) + 
  stat_summary(fun = mean, geom = "bar", position="dodge") +
  stat_summary(fun.data = mean_se, geom = "errorbar", position = "dodge") + 
  facet_wrap(~rounded) +
  labs(
    title = "Effect of Goal % Reduction and Rounding",
    x = "Goal % Reduction",
    y = "% Change",
    fill= "Rounding"
  ) 

```


## Calculator and education




```{r}


# table with only education level counts, just use kable
s2 |> 
  group_by(edu) |> 
  summarise(n = n(), .groups = "drop") |>
  knitr::kable(caption = "Count of Items by Education Level", format = "html") 

# table with only calculator counts

s2 |> 
  mutate(calc = if_else(calc == 0, "No Calculator", "Used Calculator")) |> 
  group_by(calc) |> 
  summarise(n = n(), .groups = "drop") |>
  knitr::kable(caption = "Count of Items by Calculator Use", format = "html")



# s2 |> 
#   mutate(rounded = case_when(ROUNDED == 1 ~ "Not Rounded", ROUNDED == 2 ~ "Rounded")) |> 
#   group_by(calc, refClass, rounded) |> 
#   summarise(n = n(), .groups = "drop") |>
#   group_by(calc, refClass) |>
#   mutate(count_stats = as.character(n)) |>
#   ungroup() |>
#   tabulator(
#     rows = c("calc", "refClass"),
#     columns = "rounded",
#     `Count` = as_paragraph(count_stats)
#   ) |>
#   as_flextable() |> 
#   align(align = "left", part = "all") |>
#   autofit() |>
#   set_caption(
#     caption = "Count of Items by Calculation Type, Reference Class, and Rounded Value",
#     style = "Table Caption"
#   )


s2 |> 
  mutate(
    rounded = if_else(ROUNDED == 1, "Not Rounded", "Rounded"),
    calc = if_else(calc == 0, "No Calculator", "Used Calculator")
  ) |> 
  count(calc, refClass, rounded) |>
  pivot_wider(
    names_from = c(calc, rounded),
    values_from = n,
    values_fill = 0
  ) |>
  gt() |>
  tab_header(
    title = md("**Count of Items by Calculator Use, Reference Class, and Rounding**")
  ) |>
  cols_align(align = "left") |>
  tab_spanner_delim(delim = "_") |>
  cols_label(
    `No Calculator_Not Rounded` = "Not Rounded",
    `No Calculator_Rounded` = "Rounded",
    `Used Calculator_Not Rounded` = "Not Rounded",
    `Used Calculator_Rounded` = "Rounded"
  )


# table with education level counts

s2 |>
  group_by(edu, refClass) |>
  summarise(n = n(), .groups = "drop") |>
  pivot_wider(names_from = refClass, values_from = n, values_fill = 0) |>
  gt(rowname_col = "edu") |>
  tab_header(title = md("**Count of Items by Education Level and Reference Class**")) |>
  cols_align(align = "left", columns = everything())


# table with calculator and education level counts
s2 |>
  mutate(calc = if_else(calc == 0, "No Calculator", "Used Calculator")) |> 
  group_by(calc, edu) |>
  summarise(n = n(), .groups = "drop") |>
  pivot_wider(names_from = edu, values_from = n, values_fill = 0) |>
  gt(rowname_col = "calc") |>
  tab_header(title = md("**Count of Items by Calculator Use and Education Level**")) |>
  cols_align(align = "left", columns = everything())




s2_agg |> ggplot(aes(x = calc, y = pct_change, fill = calc)) + 
  stat_summary(fun = mean, geom = "bar", position="dodge") +
  stat_summary(fun.data = mean_se, geom = "errorbar", position = "dodge") +
  labs(
    title = "Effect of Calculator Use",
    x = "Calculator Use",
    y = "% Change",
    fill = "Calculator Use"
  )


## education

s2_agg |> ggplot(aes(x = edu, y = pct_change, fill = edu)) + 
  stat_summary(fun = mean, geom = "bar", position="dodge") +
  stat_summary(fun.data = mean_se, geom = "errorbar", position = "dodge") +
  labs(
    title = "Effect of Education",
    x = "Education",
    y = "% Change",
    fill = "Education"
  )




```





```{r}
#| fig.height: 11
#| 
# sum1 |> 
#   ungroup() |> 
#   mutate(goal_pct = as.numeric(stringr::str_remove(pct_goal,"%"))/100,
#          block=factor(block)) |>
#   group_by(refClass,block,pct_goal) |>
#   summarise(mean_pct_change = mean(pct_change),se_pct_change = sd(pct_change)/sqrt(n())) |>
#   ggplot(aes(x=mean_pct_change,y=refClass,col=block)) + 
#   geom_pointrange(aes(xmin=mean_pct_change-se_pct_change,xmax=mean_pct_change+se_pct_change),position = position_dodge(width=0.5)) +
#   ggforce::facet_col(~pct_goal)
# 
# 
# sum1 |> 
#   ungroup() |> 
#   mutate(goal_pct = as.numeric(stringr::str_remove(pct_goal,"%"))/100,
#          block=factor(block)) |>
#   group_by(refClass,,pct_goal,state) |>
#   summarise(mean_pct_change = mean(pct_change),se_pct_change = sd(pct_change)/sqrt(n())) |>
#   ggplot(aes(x=mean_pct_change,y=refClass,col=pct_goal)) + 
#   geom_pointrange(aes(xmin=mean_pct_change-se_pct_change,xmax=mean_pct_change+se_pct_change),position = position_dodge(width=0.5)) +
#   ggforce::facet_col(~state)
# 
# 
# sum1 |> 
#   ungroup() |> 
#   mutate(goal_pct = as.numeric(stringr::str_remove(pct_goal,"%"))/100,
#          block=factor(block)) |>
#   group_by(refClass,,pct_goal,state,goal_pct) |>
#   summarise(mean_pct_change = mean(pct_change),se_pct_change = sd(pct_change)/sqrt(n())) |>
#   ggplot(aes(x=mean_pct_change,y=refClass,col=state)) + 
#   geom_vline(aes(xintercept=goal_pct),linetype="dashed",alpha=.5) +
#   geom_pointrange(aes(xmin=mean_pct_change-se_pct_change,xmax=mean_pct_change+se_pct_change),position = position_dodge(width=0.5)) +
#   ggforce::facet_col(~pct_goal)



  s2_long |> 
    filter(appliance != "TOTAL") |>
  group_by(refClass,appliance,state) |>
  summarise(mean_kWh_change = mean(change),se_pct_change = sd(change)/sqrt(n())) |>
  ggplot(aes(x=mean_kWh_change,y=refClass,col=appliance)) + 
  geom_pointrange(aes(xmin=mean_kWh_change-se_pct_change,xmax=mean_kWh_change+se_pct_change),position = position_dodge(width=0.5)) +
  ggforce::facet_col(~state)

  
s2_long |> 
  filter(appliance != "TOTAL") |>
  ggplot(aes(x=refClass,y=change,fill=state))+
  stat_summary(fun = mean, geom = "bar", position="dodge") +
  stat_summary(fun.data = mean_se, geom = "errorbar", position = "dodge") +
  scale_y_reverse() +
  facet_wrap(~appliance)
  



```





```{r}
#| eval: FALSE


contingency_table <- sum1 %>%
    group_by(refClass) %>%
    summarise(
      matched = sum(matched_goal),
      unmatched = n() - sum(matched_goal)
    ) %>%
    select(matched, unmatched) %>%
    as.matrix()

# Perform the chi-squared test
chisq_test <- chisq.test(contingency_table)

# View the results
chisq_test


sum1b <- sum1 %>%
  mutate(matched_goal = as.numeric(matched_goal)) 

library(brms)
bayesian_model <- brms::brm(
  matched_goal ~ refClass,        # Logistic regression with reference class as predictor
  data = sum1,                    # The dataset
  family = bernoulli(),           # Binary outcome model
  prior = set_prior("normal(0, 1)", class = "b"),  # Prior for coefficients
  iter = 2000,                    # Number of iterations
  chains = 4,                     # Number of MCMC chains
  cores = 4,                      # Number of cores for parallel computation
  seed = 123                      # Set seed for reproducibility
)
# Regression Coefficients:
#                    Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
# Intercept             -1.27      0.14    -1.55    -1.00 1.00     3696     3393
# refClassPercentage    -0.56      0.22    -0.98    -0.14 1.00     3308     3065
# refClassUSD           -0.95      0.25    -1.45    -0.46 1.00     2895     2701


bm2 <- brms::brm(
  matched_goal ~ refClass + (1|id),        # Logistic regression with reference class as predictor
  data = sum1,                    # The dataset
  family = bernoulli(),           # Binary outcome model
  prior = set_prior("normal(0, 1)", class = "b"),  # Prior for coefficients
  iter = 2000,                    # Number of iterations
  chains = 4,                     # Number of MCMC chains
  cores = 4,                      # Number of cores for parallel computation
  seed = 123                      # Set seed for reproducibility
)
# Regression Coefficients:
#                    Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
# Intercept             -1.92      0.31    -2.56    -1.37 1.00     2039     2669
# refClassPercentage    -0.73      0.36    -1.43    -0.02 1.00     2586     3142
# refClassUSD           -1.15      0.41    -1.95    -0.37 1.00     3079     3071



bm3 <- brms::brm(
  matched_goal ~ refClass*rounded + (1|id),        # Logistic regression with reference class as predictor
  data = sum1,                    # The dataset
  family = bernoulli(),           # Binary outcome model
  prior = set_prior("normal(0, 1)", class = "b"),  # Prior for coefficients
  iter = 2000,                    # Number of iterations
  chains = 4,                     # Number of MCMC chains
  cores = 4,                      # Number of cores for parallel computation
  seed = 123                      # Set seed for reproducibility
)
# Regression Coefficients:
#                                   Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
# Intercept                            -1.80      0.34    -2.49    -1.17 1.00     1896     2384
# refClassPercentage                   -1.48      0.45    -2.37    -0.61 1.00     3108     3324
# refClassUSD                          -1.54      0.47    -2.53    -0.66 1.00     3309     3226
# roundedRounded                       -0.59      0.30    -1.17     0.02 1.00     4310     2857
# refClassPercentage:roundedRounded     1.71      0.45     0.83     2.59 1.00     4076     3070
# refClassUSD:roundedRounded            1.00      0.50     0.02     1.96 1.00     4399     3144



bm4 <- brms::brm(
  matched_goal ~ refClass*rounded + (1|id) +(1|state),        # Logistic regression with reference class as predictor
  data = sum1,                    # The dataset
  family = bernoulli(),           # Binary outcome model
  prior = set_prior("normal(0, 1)", class = "b"),  # Prior for coefficients
  iter = 2000,                    # Number of iterations
  chains = 4,                     # Number of MCMC chains
  cores = 4,                      # Number of cores for parallel computation
  seed = 123                      # Set seed for reproducibility
)
# Regression Coefficients:
#                                   Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
# Intercept                            -1.77      0.44    -2.62    -0.81 1.01      526      187
# refClassPercentage                   -1.49      0.44    -2.34    -0.62 1.00     1352     1519
# refClassUSD                          -1.53      0.48    -2.49    -0.62 1.00     1836     2504
# roundedRounded                       -0.58      0.29    -1.16    -0.03 1.00     2933     2938
# refClassPercentage:roundedRounded     1.72      0.45     0.85     2.59 1.00     1936     2501
# refClassUSD:roundedRounded            1.00      0.48     0.05     1.91 1.00     2460     2472




```



```{r}
#| eval: false

# mixed effects model testing effect of refClass, state, and pct_goal on pct_change
# marginal effects plots
library(ggeffects)


m1 <- lmer(pct_change ~ refClass  + (1+plan|id) + (1|state), data = s2_agg)
summary(m1)
ggpredict(m1, c("refClass")) |> plot()

m1 <- lmer(pct_change ~ pct_goal  + (1|id) + (1|state), data = s2_agg)
summary(m1)
ggpredict(m1, c("pct_goal")) |> plot()

m1 <- lmer(pct_change ~ pct_goal*rounded  + (1|id) + (1|state), data = s2_agg)
summary(m1)
ggpredict(m1, c("pct_goal","rounded")) |> plot()


m1 <- lmer(pct_change ~ refClass*pct_goal*rounded  + (1|id) + (1|state), data = s2_agg)
ggpredict(m1, c("refClass","pct_goal","rounded")) |> plot()

m1 <- lmer(pct_change ~ state*pct_goal*rounded  + (1|id), data = s2_agg)
summary(m1)
ggpredict(m1, c("state","pct_goal","rounded")) |> plot()


# m1 <- lmer(pct_change ~ refClass*pct_goal*rounded*state  + (1|id), data = sum1)
# ggpredict(m1, c("refClass","pct_goal","rounded","state")) |> plot()

```



```{r}
#| eval: false




s2_long |> 
  filter(appliance != "TOTAL") |>
  ggplot(aes(x=refClass,y=state_dif,fill=state))+
  stat_summary(fun = mean, geom = "bar", position="dodge") +
  stat_summary(fun.data = mean_se, geom = "errorbar", position = "dodge") +
  scale_y_reverse() +
  facet_wrap(~appliance)

s2_long |> 
  filter(appliance != "TOTAL") |>
  ggplot(aes(x=state_dif,y=value,col=state))+
  geom_point() +
  facet_wrap(~appliance)


sum1 |> 
  ggplot(aes(x=state_dif,y=pct_change,col=state)) +
  geom_point() 


# compute total kWh reduction, and total % reduction 
s2_long |> group_by(id,refClass,state,pct_goal,rounded,block,plan) |> 
  filter(appliance !="TOTAL") |> 
  summarise(total_kWh = sum(value),orig_kWh=sum(family), total_pct = sum(value)/sum(family)) |>
  ggplot(aes(x = pct_goal, y = total_pct, fill = refClass)) + 
  geom_boxplot(position = "dodge") +
  facet_wrap(~state)
  
s2_long |> group_by(id,refClass,state,pct_goal,rounded) |> 
  filter(appliance !="TOTAL") |> 
  summarise(total_kWh = sum(reduction), total_pct = sum(reduction)/sum(family)) |>
  ggplot(aes(x = pct_goal, y = total_pct, fill = refClass)) + 
  stat_summary(fun = mean, geom = "bar", position="dodge") +
  stat_summary(fun.data = mean_se, geom = "errorbar", position = "dodge") 
  

s2_long |> group_by(id,refClass,state,pct_goal,rounded) |> 
  filter(appliance !="TOTAL") |> 
  summarise(total_kWh = sum(reduction), orig_kWh=sum(family), total_pct = round(sum(reduction)/sum(family))) |>
  ggplot(aes(x = state1, y = total_pct, fill = refClass)) + 
  stat_summary(fun = mean, geom = "bar", position="dodge") +
  stat_summary(fun.data = mean_se, geom = "errorbar", position = "dodge") +
  facet_wrap(~pct_goal)
  

s2_long |> group_by(id,refClass,state,pct_goal,rounded,plan) |> 
  filter(appliance !="TOTAL") |> 
  summarise(total_kWh = sum(reduction), total_pct = sum(reduction)/sum(family)) |>
  ggplot(aes(x = refClass, y = total_pct, fill = pct_goal)) + 
  stat_summary(fun = mean, geom = "bar", position="dodge") +
  stat_summary(fun.data = mean_se, geom = "errorbar", position = "dodge") +
  facet_wrap(plan~rounded)

# sum1 |> 
#   ungroup() |> 
#   mutate(goal_pct = as.numeric(stringr::str_remove(pct_goal,"%"))/100) |>
#   mutate(id=reorder(id,pct_change)) |> 
#   ggplot(aes(y=id,x=pct_change)) + 
#   geom_point(size=1,alpha=0.6,position = position_jitter(w=0, h=0.17)) +
#   geom_vline(aes(xintercept=goal_pct),linetype="dashed",alpha=.5) +
#   ggh4x::facet_nested_wrap(refClass~pct_goal,axes="all",scales="free",ncol=2) 

# sum1 |> 
#   ungroup() |> 
#   mutate(goal_pct = as.numeric(stringr::str_remove(pct_goal,"%"))/100) |>
#   mutate(id=reorder(id,pct_change)) |> 
#   ggplot(aes(y=id,x=pct_change,col=refClass)) + 
#   geom_point(size=1,alpha=0.6,position = position_jitter(w=0, h=0.17)) +
#   geom_vline(aes(xintercept=goal_pct),linetype="dashed",alpha=.5) +
#   ggh4x::facet_nested_wrap(block~pct_goal,axes="all",scales="free",ncol=2) 
# 
# 
# sum1 |> 
#   ungroup() |> 
#     mutate(goal_pct = as.numeric(stringr::str_remove(pct_goal,"%"))/100) |>
#   ggplot(aes(x=state,y=pct_change,col=state)) + 
#   geom_point(size=1,alpha=0.6,position = position_jitter(w=0, h=0.17)) +
#     geom_hline(aes(yintercept=goal_pct),linetype="dashed",alpha=.5) +
#   ggdist::stat_halfeye()+
#   ggh4x::facet_nested_wrap(block~pct_goal,axes="all",ncol=2) 


# s2_long <- s2 |>
#   pivot_longer(
#     cols = c(ACFAMILY1:TOTALAPTWO1),
#     names_to = c(".value", "appliance"),
#     names_pattern = "(.*)(FAMILY1|STATE1|APONE1|APTWO1)$",
#     values_to = "value"
#   )




# s2 |> pivot_longer(cols = contains("FAMILY"), names_to = "Family", values_to = "kWh") |> relocate(Family,kWh) |> 
#   pivot_longer(cols = contains("STATE1"), names_to = "State", values_to = "kWh") |> relocate(State)


# 
# s2 |> 
#   pivot_longer(cols=ACFAMILY1:TOTALAPTWO1, names_to = "appliance", values_to = "family") |> relocate(appliance,family)


```

