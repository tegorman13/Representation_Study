---
title: "Outliers and discrepancies"
author:
- name: Thomas E. Gorman
  url: https://tegorman13.github.io/
  affiliations: 
  - name:  Communication and Cognition Lab, Purdue University, USA
    affiliation-url: https://web.ics.purdue.edu/~treimer/
lightbox: true
toc: false
code-fold: true
code-tools: true
execute:
  #echo: false
  warning: false
format:
  html: 
    grid:
      sidebar-width: 220px
      body-width: 1200px
      margin-width: 170px
      gutter-width: 1.0rem
  # hugo-md:
  #   include: true
  #   html-math-method: mathjax
  #   output-file: results_hugo.md
  # gfm:
  #   echo: true
  #   output-file: results_gfm.md
---




```{r}
library(pacman)
pacman::p_load(dplyr,purrr,tidyr,here, haven,tibble,ggplot2,gt,ggh4x,lme4,flextable,ggdist)

s1 <- readRDS(here::here("data/s1_processed.rds"))

s2_long <- readRDS(here::here("data/s2_processed.rds"))

s1_agg <- s1 |> 
  filter(appliance !="Total kWh") |> 
  group_by(id,refClass,state,block,plan,calc,edu,pct_goal) |> 
  summarise(total_kWh = sum(value),orig_kWh=sum(family), 
            pct_change = round((orig_kWh-total_kWh)/orig_kWh,3), 
            n_change = sum(value!=family),
            state_p_dif=mean(state_p_dif),
            state_f_dif=mean(state_f_dif),
            n_less_avg = sum(less_avg),
            duration=first(Duration__in_seconds_)) |> 
  mutate(matched_goal = (pct_change == pct_goal), 
             error = pct_change - pct_goal,
            abs_error = abs(error))

# s1_agg |> filter(matched_goal==FALSE, abs_error<.02) |> pull(abs_error)


s1_agg4 <- s1_agg |> group_by(id,refClass) |> 
  summarise(mg=sum(matched_goal),n=n(), pct=mg/n) 

s1_agg2 <- s1_agg |> group_by(id,refClass,state) |> 
  summarise(mg=sum(matched_goal),n=n(), pct=mg/n) 

outliers <- s1_agg |>  ungroup() |> group_by(state) |> mutate(change_mean=mean(pct_change,na.rm=TRUE),change_sd=sd(pct_change,na.rm=TRUE),
                                     z_score=(pct_change-change_mean)/change_sd,
                                     is_outlier=abs(z_score)>3.0)
outlier_id <- outliers |> filter(is_outlier) |> pull(id) |> unique()



```



```{r}
#| eval: false

# quick summary of s1$Duration_in_seconds variable
summary(s1$Duration__in_seconds_)
  #  Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  #   176     846    1184    1659    1688   47914 

s1 |> group_by(refClass) |> 
  summarize(mean(Duration__in_seconds_),sd(Duration__in_seconds_),median(Duration__in_seconds_))

s1 |> ggplot(aes(x=Duration__in_seconds_)) + geom_histogram() + facet_wrap(~refClass)

s1 |>  mutate(id=reorder(id,Duration__in_seconds_)) |> 
  ggplot(aes(y=id,x=Duration__in_seconds_)) + 
  geom_point(size=1,alpha=0.6,position = position_jitter(w=0, h=0.17)) +
  ggh4x::facet_nested_wrap(~refClass,axes="all",scales="free",ncol=2)  


s1_agg |> filter(duration<10000) |>
  ggplot(aes(x=duration,y=abs_error)) + geom_point() +
  facet_wrap(~refClass)


s1_agg |> ggplot(aes(x=duration)) + geom_density() + facet_wrap(~refClass) + stat_halfeye()



s2_long |> filter(id=="s2_10") |> head(20)



s2_long |> filter(id %in% unique(s2_long$id)[1:30]) |> 
  filter(appliance!="TOTAL",state=="California") |> 
  ggplot(aes(x=appliance,y=value)) + geom_point(aes(shape=plan)) +
  geom_point(aes(y=state_avg),color="red") +
  geom_point(aes(y=family),color="blue") +
  facet_wrap(~id) + theme(axis.text.x = element_text(angle = 45, hjust = 1))


s2_long |> 
  filter(appliance!="TOTAL",state=="California") |> 
   ggplot(aes(x=appliance,y=family)) + geom_point() + facet_wrap(~rounded)


s2_long |> 
  filter(appliance!="TOTAL",state=="California") |> 
  group_by(appliance,family,rounded) |> 
  # counts for each distinct value
  summarise(n=n()) 

s2_long |> 
  filter(appliance!="TOTAL",state=="California",plan=="plan1") |> 
  group_by(appliance,family,rounded) |> 
  summarise(n=n()) |>
  ggplot(aes(x=appliance,y=family)) + geom_point(aes(size=n,alpha=.2)) + 
  geom_text(aes(label=n),vjust=1,size=8) +
  facet_wrap(~rounded)

s2_long |> 
  filter(appliance!="TOTAL",plan=="plan1") |> 
  group_by(appliance,family,rounded,state) |> 
  summarise(n=n()) |>
  ggplot(aes(x=appliance,y=family)) + geom_point(aes(size=n,alpha=.2)) + 
  geom_text(aes(label=n),vjust=1,size=7) +
  facet_wrap(state~rounded)



# bar plot version of the above
s2_long |> 
  filter(appliance!="TOTAL",state=="California") |> 
  group_by(appliance,family,rounded) |> 
  summarise(n=n()) |>
  ggplot(aes(x=appliance,y=family,fill=rounded)) + geom_col() + facet_wrap(~rounded)


s2_long %>%
  filter(appliance != "TOTAL", plan == "plan1") %>%
  group_by(appliance, rounded, state) %>%
  mutate(
    distinct_families = n_distinct(family),
    color_flag = distinct_families > 1  # Flag as TRUE if more than 1 distinct value
  ) %>%
  ungroup() %>%
  # Continue grouping for plotting
  group_by(appliance, family, rounded, state,color_flag) %>%
  summarise(n = n(), .groups = "drop") %>%
  ggplot(aes(x = appliance, y = family,color = color_flag,fill=color_flag)) +
 geom_point(aes(alpha = .1, color = color_flag), position = position_jitter(width = 0.15)) +
  geom_text(aes(label = n), size = 4, position = position_jitter(width = 0.45)) +
  scale_color_manual(values = c("FALSE" = "black", "TRUE" = "blue"), guide = "none") +
  facet_wrap(state ~ rounded,scales="free_y") +
  labs(
    x = "Appliance",
    y = "Family Value",
    size = "Frequency (n)"
  ) 


s2_long %>%
  filter(appliance != "TOTAL", plan == "plan1") %>%
  group_by(appliance, rounded, state) %>%
  mutate(
    distinct_families = n_distinct(state_avg),
    color_flag = distinct_families > 1  # Flag as TRUE if more than 1 distinct value
  ) %>%
  ungroup() %>%
  # Continue grouping for plotting
  group_by(appliance, state_avg, rounded, state,color_flag) %>%
  summarise(n = n(), .groups = "drop") %>%
  ggplot(aes(x = appliance, y = state_avg,color = color_flag,fill=color_flag)) +
 geom_point(aes(alpha = .1, color = color_flag), position = position_jitter(width = 0.15)) +
  geom_text(aes(label = n), size = 4, position = position_jitter(width = 0.15)) +
  scale_color_manual(values = c("FALSE" = "black", "TRUE" = "blue"), guide = "none") +
  facet_wrap(state ~ rounded,scales="free_y") +
  labs(
    x = "Appliance",
    y = "Family Value",
    size = "Frequency (n)"
  ) 



s1 %>%
  filter(appliance != "Total kWh", plan == "plan1") %>%
  group_by(appliance, state,refClass) %>%
  mutate(
    distinct_families = n_distinct(family),
    color_flag = distinct_families > 1  # Flag as TRUE if more than 1 distinct value
  ) %>%
  ungroup() %>%
  # Continue grouping for plotting
  group_by(appliance, family, state,color_flag,refClass) %>%
  summarise(n = n(), .groups = "drop") %>%
  filter(color_flag) |> 
  ggplot(aes(x = appliance, y = family,color = color_flag,fill=color_flag)) +
 #geom_point(aes(alpha = .1, color = color_flag), position = position_jitter(width = 0.15)) +
  geom_text(aes(label = n), size = 4, position = position_jitter(width = 0.75,height=.1)) +
  scale_color_manual(values = c("FALSE" = "black", "TRUE" = "blue"), guide = "none") +
  facet_wrap(refClass~state,scales="free_y") +
  labs(
    x = "Appliance",
    y = "Family Value",
    size = "Frequency (n)"
  ) 

```







## Task data checks



```{r}





library(tidyverse)
library(haven)

# for every combination of state, appliance, and refClass, calculate the number of distinct values of family, and of state_avg
s1 |> group_by(state,appliance,refClass) |> 
  mutate(state_avg=as.numeric(state_avg)) |> 
  summarise(n_distinct_family=n_distinct(family),
            n_distinct_state_avg=n_distinct(state_avg), 
            # paste a string of each distinct value, separated by a comma
            distinct_family=paste(unique(family),collapse=","),
            distinct_state_avg=paste(unique(state_avg),collapse=",")) |>
  filter(n_distinct_family>1 | n_distinct_state_avg>1) 


s2_long |> group_by(state,appliance,refClass,rounded) |> 
  mutate(state_avg=as.numeric(state_avg)) |> 
  summarise(n_distinct_family=n_distinct(family),
            n_distinct_state_avg=n_distinct(state_avg), 
            # paste a string of each distinct value, separated by a comma
            distinct_family=paste(unique(family),collapse=","),
            distinct_state_avg=paste(unique(state_avg),collapse=",")) |>
  filter(n_distinct_family>1 | n_distinct_state_avg>1) 


s1 |> group_by(state,appliance,refClass) |> 
  mutate(n_distinct_family=n_distinct(family),
            n_distinct_state_avg=n_distinct(state_avg), 
            # paste a string of each distinct value, separated by a comma
            distinct_family=paste(unique(family),collapse=","),
            distinct_state_avg=paste(unique(state_avg),collapse=",")) |>
  group_by(state,appliance,refClass,family,state_avg) |>
  select(-calc,-edu,-modality,-id2,-Duration__in_seconds_) |> 
    filter(n_distinct_family>1 | n_distinct_state_avg>1) |> head(20)


s1 |> 
    group_by(state, appliance, refClass) |> 
    mutate(n_distinct_family = n_distinct(family),
           n_distinct_state_avg = n_distinct(state_avg), 
           distinct_family = paste(unique(family), collapse = ","),
           distinct_state_avg = paste(unique(state_avg), collapse = ",")) |>
    filter(n_distinct_family > 1 | n_distinct_state_avg > 1) |> 
    group_by(state, appliance, refClass, family, state_avg) |> 
    mutate(state_avg_count = n_distinct(state_avg),
           family_count = n()) |> 
    ungroup() |> 
    group_by(state, appliance, refClass, state_avg) |> 
    mutate(state_avg_count = n()) |> 
    distinct(state, appliance, refClass, family, state_avg, family_count, state_avg_count) |> 
  arrange(state,appliance,refClass) |> head(15)



problematic_ids <- c("R_1kFwgoKAmNTwCs3") # Add other IDs as needed

raw_subset <-  haven::read_sav(here::here("data/Frequency & Probability Study 1 - 3-24-19.sav")) %>%
  filter(ResponseId %in% problematic_ids) %>%
  select(ResponseId, starts_with("P1"), starts_with("P2"), 
         starts_with("P3"), starts_with("P4"))

print(raw_subset)

s2_long |> filter(state=="Texas",appliance=="HEAT", rounded=="Not Rounded",refClass=="kWh") |> arrange(-family)
s2_long |> filter(id=="s2_10") |> head(20) # no effort





```


r$> s1 |> filter(family==34265) |> select(id,state1,state2,refClass,id2,state,appliance,family,state_avg,plan,value,block,pct_goal)
# A tibble: 2 × 13
# Groups:   id [1]
     id state1 state2        refClass id2               state appliance     family state_avg plan  value block pct_goal
  <int> <chr>  <chr>         <chr>    <chr>             <chr> <chr>          <dbl> <dbl+lbl> <fct> <dbl> <dbl>    <dbl>
1    16 Texas  Massachusetts USD      R_3gNKA8IQr0uOSh3 TEX   Water Heating  34265 4396      plan1  5486     1     0.15
2    16 Texas  Massachusetts USD      R_3gNKA8IQr0uOSh3 TEX   Water Heating  34265 4396      plan2  6414     1     0.15





s2_long |> group_by(state,appliance,refClass,rounded) |> 
  mutate(state_avg=as.numeric(state_avg)) |> 
  summarise(n_distinct_family=n_distinct(family),
            n_distinct_state_avg=n_distinct(state_avg), 
            # paste a string of each distinct value, separated by a comma
            distinct_family=paste(unique(family),collapse=","),
            distinct_state_avg=paste(unique(state_avg),collapse=",")) |>
  filter(n_distinct_family>1 | n_distinct_state_avg>1) 
 # A tibble: 8 × 8
# Groups:   state, appliance, refClass [8]
  state         appliance refClass   rounded     n_distinct_family n_distinct_state_avg distinct_family distinct_state_avg
  <chr>         <chr>     <chr>      <chr>                   <int>                <int> <chr>           <chr>             
1 California    HEAT      kWh        Not Rounded                 2                    1 3000,6157       5597              
2 Colorado      HEAT      USD        Rounded                     1                    2 18000           16411,NA          
3 Colorado      WATER     Percentage Not Rounded                 1                    2 11667           1142,5832         
4 Massachusetts AC        Percentage Rounded                     2                    1 0,1             322               
5 Massachusetts AC        USD        Rounded                     2                    1 0,1             322               
6 Texas         HEAT      Percentage Not Rounded                 2                    1 6118,5          5099              
7 Texas         HEAT      kWh        Not Rounded                 2                    1 8539,6118       5099              
8 Texas         WATER     Percentage Not Rounded                 2                    1 5.257,5257      4396     



r$> s2_long |> filter(family==3000,state=="California",appliance=="HEAT")
# A tibble: 2 × 16
# Groups:   id, block [1]
  id    block refClass appliance pct_goal rounded     state      calc          edu            pct family state_avg plan  value change state_dif
  <chr> <dbl> <chr>    <chr>     <chr>    <chr>       <chr>      <chr>         <fct>        <dbl>  <dbl>     <dbl> <fct> <dbl>  <dbl>     <dbl>
1 s2_11     1 kWh      HEAT      10%      Not Rounded California No Calculator Some college   0.1   3000      5597 plan1  4000   1000     -1597
2 s2_11     1 kWh      HEAT      10%      Not Rounded California No Calculator Some college   0.1   3000      5597 plan2  5000   2000      -597


s2_long |> filter(family==1)
  id    block refClass   appliance pct_goal rounded state         calc          edu              pct family state_avg plan  value change state_dif
  <chr> <dbl> <chr>      <chr>     <chr>    <chr>   <chr>         <chr>         <fct>          <dbl>  <dbl>     <dbl> <fct> <dbl>  <dbl>     <dbl>
1 s2_8      1 Percentage AC        15%      Rounded Massachusetts Calculator    College degree  0.15      1       322 plan1     1      0      -321
2 s2_8      1 Percentage AC        15%      Rounded Massachusetts Calculator    College degree  0.15      1       322 plan2     1      0      -321
3 s2_9      2 USD        AC        10%      Rounded Massachusetts No Calculator College degree  0.1       1       322 plan1     1      0      -321
4 s2_9      2 USD        AC        10%      Rounded Massachusetts No Calculator College degree  0.1       1       322 plan2     1      0      -321



## Wells Family 15 R and Smith Family 10 E Percentage - 5.257 for Texas water heating

 s2_long |> filter(family==5.257)
# A tibble: 8 × 16
# Groups:   id, block [4]
  id    block refClass   appliance pct_goal rounded     state calc          edu               pct family state_avg plan  value change state_dif
  <chr> <dbl> <chr>      <chr>     <chr>    <chr>       <chr> <chr>         <fct>           <dbl>  <dbl>     <dbl> <fct> <dbl>  <dbl>     <dbl>
1 s2_1      2 Percentage WATER     10%      Not Rounded Texas Calculator    Some college      0.1   5.26      4396 plan1  5000  4995.       604
2 s2_1      2 Percentage WATER     10%      Not Rounded Texas Calculator    Some college      0.1   5.26      4396 plan2  5000  4995.       604
3 s2_2      2 Percentage WATER     10%      Not Rounded Texas No Calculator Graduate degree   0.1   5.26      4396 plan1  4396  4391.         0
4 s2_2      2 Percentage WATER     10%      Not Rounded Texas No Calculator Graduate degree   0.1   5.26      4396 plan2  5257  5252.       861
5 s2_3      2 Percentage WATER     10%      Not Rounded Texas Calculator    Graduate degree   0.1   5.26      4396 plan1  3527  3522.      -869
6 s2_3      2 Percentage WATER     10%      Not Rounded Texas Calculator    Graduate degree   0.1   5.26      4396 plan2  3027  3022.     -1369
7 s2_4      2 Percentage WATER     10%      Not Rounded Texas Calculator    Graduate degree   0.1   5.26      4396 plan1  4800  4795.       404
8 s2_4      2 Percentage WATER     10%      Not Rounded Texas Calculator    Graduate degree   0.1   5.26      4396 plan2  5000  4995.       604





```{r}
library(dplyr)
library(flextable)
library(officer)


correct_values <- tribble(
  ~state, ~appliance, ~family, ~state_avg,
  # Texas values
  "Texas", "Cooling", 6573, 4249,
  "Texas", "Heating", 6118, 5099,
  "Texas", "Water Heating", 5257, 4396,
  "Texas", "Refrigerator", 2639, 1318,
  "Texas", "Other Appliance", 8459, 7883,
  "Texas", "Total kWh", 29046, 22945,
  
  # California values
  "California", "Cooling", 2581, 1289,
  "California", "Heating", 6157, 5597,
  "California", "Water Heating", 5061, 4601,
  "California", "Refrigerator", 1266, 1055,
  "California", "Other Appliance", 7608, 6916,
  "California", "Total kWh", 22673, 19458,
  
  # Colorado values
  "Colorado", "Cooling", 697, 498,
  "Colorado", "Heating", 18052, 16411,
  "Colorado", "Water Heating", 11667, 5832,
  "Colorado", "Refrigerator", 1370, 1142,
  "Colorado", "Other Appliance", 7882, 6652,
  "Colorado", "Total kWh", 39768, 30535,
  
  # Massachusetts values
  "Massachusetts", "Cooling", 419, 322,
  "Massachusetts", "Heating", 26751, 19108,
  "Massachusetts", "Water Heating", 10543, 5070,
  "Massachusetts", "Refrigerator", 1230, 1025,
  "Massachusetts", "Other Appliance", 7350, 6682,
  "Massachusetts", "Total kWh", 46293, 32207
)


# First, create a lookup table of correct values
correct_lookup <- correct_values %>%
  select(state, appliance, family) %>%
  mutate(state = case_when(
    state == "Texas" ~ "TEX",
    state == "California" ~ "CAL",
    state == "Colorado" ~ "COL",
    state == "Massachusetts" ~ "MASS",
    TRUE ~ state
  ))

# Modify the main table
s1 %>%
  filter(appliance != "Total kWh", plan == "plan1") %>%
  group_by(appliance, state, refClass) %>%
  mutate(
    distinct_families = n_distinct(family),
    color_flag = distinct_families > 1
  ) %>%
  ungroup() %>%
  filter(color_flag) %>%
  group_by(appliance, family, state, color_flag, refClass) %>%
  summarise(n = n(), .groups = "drop") %>%
  select(-color_flag) %>%
  # Join with correct values to create is_correct flag
  left_join(correct_lookup, 
            by = c("state", "appliance"),
            suffix = c("", "_correct")) %>%
  mutate(is_correct = abs(as.numeric(family) - family_correct) < 0.1) %>%
  select(-family_correct) %>%
  # Reorganize and format
  select(state, refClass, appliance, family, n, is_correct) %>%  # Swapped order here
  arrange(state, appliance, refClass, family) %>%
  flextable() %>%
  # Merge cells
  merge_v(j = "state") %>%
  merge_v(j = c("appliance", "refClass")) %>%
  # Conditional formatting for both family and count
  color(i = ~ is_correct == TRUE, j = c("family", "n"), color = "darkgreen") %>%
  color(i = ~ is_correct == FALSE, j = c("family", "n"), color = "darkred") %>%
  bg(i = ~ is_correct == TRUE, j = c("family", "n"), bg = "#e6ffe6") %>%
  bg(i = ~ is_correct == FALSE, j = c("family", "n"), bg = "#ffe6e6") %>%
  # Style improvements
  theme_vanilla() %>%
  align(j = c("family", "n"), align = "right") %>%
  border_outer() %>%
  border_inner() %>%
  fontsize(size = 11) %>%
  padding(padding = 4) %>%
  # Add section borders
  hline(i = ~ state != lag(state, default = first(state)), 
        border = officer::fp_border(color = "gray40", width = 2)) %>%
  colformat_double(j = "family", digits = 1) %>%
  set_header_labels(
    state = "State",
    appliance = "Appliance",
    family = "Family",
    refClass = "Reference Class",
    n = "Count",
    is_correct = "Correct Value"
  ) %>%
  autofit()



library(dplyr)
library(flextable)
library(officer)

s1 %>%
  filter(appliance != "Total kWh", plan == "plan1") %>%
  group_by(appliance, state, refClass) %>%
  mutate(distinct_state_avg = n_distinct(state_avg)) %>%
  ungroup() %>%
  filter(distinct_state_avg > 1) %>%
  group_by(appliance, state_avg, state, refClass) %>%
  summarise(n = n(), .groups = "drop") %>%
  # Identify outliers (rows where n is 1)
  mutate(is_outlier = n == 1) %>%
  # Reorganize and format
  select(state, refClass, appliance, state_avg, n) %>%
  arrange(state, appliance, refClass, state_avg) %>%
  flextable() %>%
  # Merge cells
  merge_v(j = "state") %>%
  merge_v(j = c("appliance", "refClass")) %>%
  # Conditional formatting for outliers
  color(i = ~ n == 1, j = c("state_avg", "n"), color = "darkred") %>%
  color(i = ~ n > 1, j = c("state_avg", "n"), color = "darkgreen") %>%
  bg(i = ~ n == 1, j = c("state_avg", "n"), bg = "#ffe6e6") %>%
  bg(i = ~ n > 1, j = c("state_avg", "n"), bg = "#e6ffe6") %>%
  # Style improvements
  theme_vanilla() %>%
  align(j = c("state_avg", "n"), align = "right") %>%
  border_outer() %>%
  border_inner() %>%
  fontsize(size = 11) %>%
  padding(padding = 4) %>%
  # Add section borders
  hline(i = ~ state != lag(state, default = first(state)), 
        border = officer::fp_border(color = "gray40", width = 2)) %>%
  colformat_double(j = "state_avg", digits = 0) %>%
  set_header_labels(
    state = "State",
    appliance = "Appliance",
    state_avg = "State Average",
    refClass = "Reference Class",
    n = "Count"
  ) %>%
  autofit()
```


### Alternate discrep frequency tables

```{r}
library(dplyr)
library(gt)

table_data <- s1 %>%
  filter(appliance != "Total kWh", plan == "plan1") %>%
  group_by(appliance, state, refClass) %>%
  mutate(distinct_families = n_distinct(family)) %>%
  ungroup() %>%
  filter(distinct_families > 1) %>%
  group_by(appliance, family, state, refClass) %>%
  summarise(n = n(), .groups = "drop") %>%
  arrange(state, refClass, appliance)

# Prepare the data with separate columns for Family and Frequency
table_data_compact <- table_data %>%
  arrange(state, appliance, refClass, desc(n)) %>%  # Sort by descending frequency
  select(state, refClass, appliance, family, n) %>%
  group_by(state, refClass, appliance) %>%
  summarise(
    Family = paste(family[order(-n)], collapse = ", "),  # Order family values by descending frequency
    Frequency = paste(n[order(-n)], collapse = ", "),    # Order frequency values in descending order
    .groups = "drop"
  )

# Create the GT table with the new format
table_data_compact %>%
  gt(rowname_col = "state") %>%
  tab_header(
    title = "Compact Frequency Table by State, RefClass, and Appliance"
  ) %>%
  # Label columns for clarity
  cols_label(
    refClass = "Reference Class",
    appliance = "Appliance",
    Family = "Family last year",
    Frequency = "Frequency (n)"
  ) %>%
  # Style the table headers
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_column_labels(columns = everything())
  ) %>%
  # Center the row group headers for each state
  tab_style(
    style = list(cell_text(weight = "bold", align = "center")),
    locations = cells_row_groups(groups = everything())
  ) %>%
  # Style the appliance rows with lighter borders for each appliance within the state
  tab_options(
    row_group.border.bottom.color = "grey",
    row_group.border.bottom.width = px(1),
    table.font.size = px(13),
    data_row.padding = px(3),  # Compact padding
    row.striping.include_stub = TRUE,
    row.striping.background_color = "lightgrey",
    table.width = pct(100)
  )


#######

library(dplyr)
library(gt)

# Prepare the data, focusing on `state_avg` instead of `family`
table_data_state_avg <- s1 %>%
  filter(appliance != "Total kWh", plan == "plan1") %>%
  group_by(appliance, state, refClass) %>%
  mutate(distinct_state_avg = n_distinct(state_avg)) %>%
  ungroup() %>%
  filter(distinct_state_avg > 1) %>%
  group_by(appliance, state_avg, state, refClass) %>%
  summarise(n = n(), .groups = "drop") %>%
  arrange(state, refClass, appliance, desc(n)) %>%  # Sort by descending frequency
  select(state, refClass, appliance, state_avg, n) %>%
  group_by(state, refClass, appliance) %>%
  summarise(
    State_Avg = paste(state_avg[order(-n)], collapse = ", "),  # Order state_avg values by descending frequency
    Frequency = paste(n[order(-n)], collapse = ", "),          # Order frequency values in descending order
    .groups = "drop"
  )

# Create the GT table with the new format
table_data_state_avg %>%
  gt(rowname_col = "state") %>%
  tab_header(
    title = "Compact Frequency Table by RefClass, Appliance, and State Average"
  ) %>%
  # Label columns for clarity
  cols_label(
    refClass = "Reference Class",
    appliance = "Appliance",
    State_Avg = "State Avg",
    Frequency = "Frequency (n)"
  ) %>%
  # Style the table headers
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_column_labels(columns = everything())
  ) %>%
  # Center the row group headers for each state
  tab_style(
    style = list(cell_text(weight = "bold", align = "center")),
    locations = cells_row_groups(groups = everything())
  ) %>%
  # Style the appliance rows with lighter borders for each appliance within the state
  tab_options(
    row_group.border.bottom.color = "grey",
    row_group.border.bottom.width = px(1),
    table.font.size = px(13),
    data_row.padding = px(3),  # Compact padding
    row.striping.include_stub = TRUE,
    row.striping.background_color = "lightgrey",
    table.width = pct(100)
  )
```







```{r}
#| eval: false

library(dplyr)
library(purrr)
library(tidyr)
library(haven)
library(here)

# Define a mapping between state codes and full state names
state_code_map <- c(
  "CAL" = "California",
  "TEX" = "Texas",
  "COL" = "Colorado",
  "MASS" = "Massachusetts"
)

# Revised parse_action_plan function
parse_action_plan <- function(df) {
  
  # Extract participant-specific states
  participant_states <- c(unique(df$state1), unique(df$state2))
  
  # Select action plan columns based on state codes
  action_plan_cols <- df %>% 
    select(matches("^[ADP]\\d+(CAL|MASS|COL|TEX)\\d{2,3}$")) %>%
    select(-matches("32$")) %>%  # Exclude columns ending with '32'
    names()
  
  # Pivot longer to reshape data
  df_long <- df %>%
    pivot_longer(
      cols = all_of(action_plan_cols),
      names_to = c("modality", "state_code", "item_num"),
      names_pattern = "^([ADP])\\d+(CAL|MASS|COL|TEX)(\\d+)$",
      values_to = "value"
    ) %>%
    mutate(
      # Map state codes to full state names
      state_full = state_code_map[state_code],
      # Ensure that the state_full is one of the participant's assigned states
      state_assigned = if_else(state_full %in% participant_states, state_full, NA_character_)
    ) %>%
    filter(!is.na(state_assigned)) %>%  # Keep only matching states
    select(id, state1, state2, refClass, calc, edu, modality, state_assigned, item_num, value, id2, Duration__in_seconds_) 
  
  # Assign appliance based on item_num
  df_long <- df_long %>%
    mutate(
      appliance = case_when(
        item_num %in% c("07","08","09","10") ~ "Cooling",
        item_num %in% c("11","12","13","14") ~ "Heating",
        item_num %in% c("15","16","17","18") ~ "Water Heating",
        item_num %in% c("19","20","21","22") ~ "Refrigerator",
        item_num %in% c("23","24","25","26") ~ "Other Appliance",
        item_num %in% c("27","28","29","30") ~ "Total kWh",
        item_num == "31" ~ "Preferred Plan",
        item_num %in% c("33","34","35","36","37") ~ "Reduction Choices",
        TRUE ~ NA_character_
      ),
      # Assign item_type based on item_num
      item_type = case_when(
        item_num %in% c("07","11","15","19","23","27") ~ "family",
        item_num %in% c("08","12","16","20","24","28") ~ "state_avg",
        item_num %in% c("09","13","17","21","25","29") ~ "plan1",
        item_num %in% c("10","14","18","22","26","30") ~ "plan2",
        TRUE ~ "other"
      )
    )
  
  # Continue processing only relevant item_types
  df_long <- df_long %>%
    filter(item_type != "other") %>%
    select(-item_num) %>%
    pivot_wider(names_from = "item_type", values_from = "value") %>%
    pivot_longer(cols = c("plan1", "plan2"), names_to = "plan", values_to = "value")
  
  return(df_long)
}

# Read and preprocess the raw data
s1 <- haven::read_sav(here::here("data/Frequency & Probability Study 1 - 3-24-19.sav"))

s1 <- s1 %>% 
  mutate(
    state1 = case_when(
      Colorado == 1 ~ "Colorado",
      Massachusetts == 1 ~ "Massachusetts",
      California == 1 ~ "California",
      Texas == 1 ~ "Texas",
      TRUE ~ NA_character_
    ),
    state2 = case_when(
      Colorado == 2 ~ "Colorado",
      Massachusetts == 2 ~ "Massachusetts",
      California == 2 ~ "California",
      Texas == 2 ~ "Texas",
      TRUE ~ NA_character_
    ),
    refClass = case_when(
      ReferenceClass == 1 ~ "USD",
      ReferenceClass == 2 ~ "kWh",
      ReferenceClass == 3 ~ "Percentage",
      TRUE ~ NA_character_
    ),
    calc = factor(if_else(is.na(MATH01), 0, MATH01)),
    id = row_number()
  ) %>%
  rename(id2 = ResponseId, edu = DEM04) %>%
  mutate(
    edu = factor(case_when(
      edu == 1 ~ "Some schooling, but no diploma or degree",
      edu == 2 ~ "Highschool diploma or GED",
      edu == 3 ~ "Some college",
      edu == 4 ~ "College degree",
      edu == 5 ~ "Some graduate school",
      edu == 6 ~ "Graduate degree",
      edu == 7 ~ "Choose not to answer",
      TRUE ~ NA_character_
    ))
  ) %>%
  relocate(id, edu, refClass, state1, state2, calc, .after = id2)

# Function to trim NA and empty columns
trim_na_and_empty_columns <- function(df) {
  df %>%
    select(where(~ !(all(is.na(.)) | (is.character(.) && all(trimws(.) == ""))))) %>% 
    select(-starts_with("AIND"))
}

# Create a list of trimmed datasets for each unique ID
dAll <- s1 %>%
  group_by(id) %>%
  group_split() %>%
  map(trim_na_and_empty_columns) %>%
  set_names(unique(s1$id))

# Apply the revised parse_action_plan function to all participants
test <- dAll %>%
  map(parse_action_plan)

# Combine all parsed data
s1_processed <- bind_rows(test)

# Handle specific data corrections (e.g., participant "R_1kFwgoKAmNTwCs3")
s1_processed <- s1_processed %>%
  mutate(
    family = if_else(id2 == "R_1kFwgoKAmNTwCs3" & state_assigned == "Texas" & appliance == "Heating", 6118, family)
  )

# Final mutations and calculations
s1_processed <- s1_processed %>%
  mutate(
    value = as.numeric(value),
    change = value - family,
    state_p_dif = value - as.numeric(state_avg),
    state_f_dif = family - as.numeric(state_avg),
    less_avg = value < as.numeric(state_avg),
    calc = if_else(calc == 0, "No Calculator", "Used Calculator")
  )



s1_processed |> group_by(state_assigned,appliance) |> 
  mutate(state_avg=as.numeric(state_avg)) |> 
  summarise(n_distinct_family=n_distinct(family),
            n_distinct_state_avg=n_distinct(state_avg), 
            # paste a string of each distinct value, separated by a comma
            distinct_family=paste(unique(family),collapse=","),
            distinct_state_avg=paste(unique(state_avg),collapse=",")) |>
  filter(n_distinct_family>1 | n_distinct_state_avg>1) 



# Convert family and state_avg to numeric
s1_processed <- s1_processed %>%
  mutate(
    family_value = as.numeric(family),
    state_avg_value = as.numeric(state_avg)
  )

# Identify discrepancies and include participant IDs
duplicate_checks <- s1_processed %>%
  group_by(state_assigned, appliance, refClass) %>%
  summarise(
    n_unique_family = n_distinct(family_value),
    n_unique_state_avg = n_distinct(state_avg_value),
    families = paste(unique(family_value), collapse = ", "),
    state_avgs = paste(unique(state_avg_value), collapse = ", "),
    participant_ids = paste(unique(id[duplicated(family_value) | duplicated(state_avg_value)]), collapse = ", "),
    .groups = 'drop'
  ) %>%
  filter(n_unique_family > 1 | n_unique_state_avg > 1)

if(nrow(duplicate_checks) > 0){
  cat("Found inconsistencies in family or state_avg values:\n")
  print(duplicate_checks)
} else {
  cat("No inconsistencies found in family or state_avg values.\n")
}
```


```{r}
#| label: s1_check
#| 
s1_processed <- s1 |> mutate(state_assigned=state)



s1_check <- s1_processed %>% 
  mutate(
    family_value = as.numeric(family),
    state_avg_value = as.numeric(state_avg)
  ) %>% 
  select(id, id2, state_assigned, appliance, family_value, state_avg_value, refClass,state)


# Rename columns in correct_values
correct_values <- correct_values %>%
  rename(
    family_correct = family,
    state_avg_correct = state_avg
  )

# Join participant data with correct values
comparison <- left_join(s1_check, correct_values, by = c("state", "appliance"))

# Compute differences between participant values and correct values
comparison <- comparison %>%
  mutate(
    family_diff = family_value - family_correct,
    state_avg_diff = state_avg_value - state_avg_correct
  )

# Identify discrepancies
discrepancies <- comparison %>%
  filter(family_diff != 0 | state_avg_diff != 0)


  if (nrow(discrepancies) > 0) {
  cat("Participants with discrepancies in family or state_avg values:\n")
  print(
    discrepancies %>%
      select(
        id,
        id2,
        state,
        appliance,
        refClass,
        family_value,
        family_correct,
        family_diff,
        state_avg_value,
        state_avg_correct,
        state_avg_diff
      )
  )
} else {
  cat("No discrepancies found between participant values and correct values.\n")
}

# Function to inspect a participant's data
inspect_participant <- function(participant_id) {
  participant_data <- comparison %>%
    filter(id == participant_id) %>%
    select(
      id,
      id2,
      state,
      appliance,
      refClass,
        family_value,
        family_correct,
        family_diff,
        state_avg_value,
        state_avg_correct,
        state_avg_diff
    )
  
 print(participant_data, n=24)
}

# Example usage:
inspect_participant(1)   # Replace with the participant ID you want to investigate
inspect_participant(11) 

```


```{r}

correct_values <- tribble(
  ~state, ~appliance, ~family, ~state_avg,
  # Texas values
  "Texas", "Cooling", 6573, 4249,
  "Texas", "Heating", 6118, 5099,
  "Texas", "Water Heating", 5257, 4396,
  "Texas", "Refrigerator", 2639, 1318,
  "Texas", "Other Appliance", 8459, 7883,
  "Texas", "Total kWh", 29046, 22945,
  
  # California values
  "California", "Cooling", 2581, 1289,
  "California", "Heating", 6157, 5597,
  "California", "Water Heating", 5061, 4601,
  "California", "Refrigerator", 1266, 1055,
  "California", "Other Appliance", 7608, 6916,
  "California", "Total kWh", 22673, 19458,
  
  # Colorado values
  "Colorado", "Cooling", 697, 498,
  "Colorado", "Heating", 18052, 16411,
  "Colorado", "Water Heating", 11667, 5832,
  "Colorado", "Refrigerator", 1370, 1142,
  "Colorado", "Other Appliance", 7882, 6652,
  "Colorado", "Total kWh", 39768, 30535,
  
  # Massachusetts values
  "Massachusetts", "Cooling", 419, 322,
  "Massachusetts", "Heating", 26751, 19108,
  "Massachusetts", "Water Heating", 10543, 5070,
  "Massachusetts", "Refrigerator", 1230, 1025,
  "Massachusetts", "Other Appliance", 7350, 6682,
  "Massachusetts", "Total kWh", 46293, 32207
)
```




```{r}
#| eval: false
#| 
# Function to inspect raw data for a specific participant and state
inspect_raw_values <- function(raw_data, response_id, state_code) {
  # Get participant's raw data
  participant_data <- raw_data %>%
    filter(ResponseId == response_id)
  
  # Get relevant columns for the state
  relevant_cols <- names(participant_data)[str_detect(names(participant_data), 
                                                    paste0("^[ADP]\\d+", state_code))]
  
  # Create a mapping for item numbers to appliance types
  appliance_map <- tribble(
    ~item_nums, ~appliance,
    "07|08", "Cooling",
    "11|12", "Heating",
    "15|16", "Water Heating",
    "19|20", "Refrigerator",
    "23|24", "Other Appliance",
    "27|28", "Total kWh"
  )
  
  # Extract and organize values
  results <- map_dfr(appliance_map$item_nums, function(nums) {
    cols <- relevant_cols[str_detect(relevant_cols, paste0("(", nums, ")$"))]
    values <- participant_data %>% select(all_of(cols)) %>% unlist()
    
    tibble(
      column = names(values),
      value = as.numeric(values),
      appliance = appliance_map$appliance[appliance_map$item_nums == nums]
    )
  })
  
  return(results)
}

# Let's check participant 1's Texas Water Heating issue
raw_data <- haven::read_sav(here::here("data/Frequency & Probability Study 1 - 3-24-19.sav"))

# Check Participant 1 (R_2QMsYuHS385pTj1)
print("Participant 1 - Texas Water Heating Values:")
p1_tex <- inspect_raw_values(raw_data, "R_2QMsYuHS385pTj1", "TEX")
print(p1_tex %>% filter(str_detect(appliance, "Water")),n=24) 

# Check Participant 11 (R_263zmNZDB4Pqn9h)
print("\nParticipant 11 - Colorado Heating Values:")
p11_col <- inspect_raw_values(raw_data, "R_263zmNZDB4Pqn9h", "COL")
print(p11_col %>% filter(str_detect(appliance, "Heating")))

# Function to compare raw vs processed values
compare_values <- function(raw_data, processed_data, response_id, state, appliance_type) {
  # Get raw values
  raw_vals <- inspect_raw_values(raw_data, response_id, 
                                case_when(
                                  state == "Texas" ~ "TEX",
                                  state == "Colorado" ~ "COL",
                                  state == "California" ~ "CAL",
                                  state == "Massachusetts" ~ "MASS"
                                )) %>%
    filter(appliance == appliance_type)
  
  # Get processed values
  proc_vals <- processed_data %>%
    filter(id2 == response_id, 
           state == !!state,
           appliance == appliance_type) %>%
    select(family, state_avg_value)
  
  # Compare
  tibble(
    source = "Raw Data",
    family = raw_vals$value[str_detect(raw_vals$column, "07$|11$|15$|19$|23$|27$")],
    state_avg = raw_vals$value[str_detect(raw_vals$column, "08$|12$|16$|20$|24$|28$")]
  ) %>%
    bind_rows(
      tibble(
        source = "Processed Data",
        family = first(proc_vals$family),
        state_avg = first(proc_vals$state_avg_value)
      )
    )
}

# Example comparisons
print("\nComparison for Participant 1 - Texas Water Heating:")
compare_values(raw_data, s1_processed, "R_2QMsYuHS385pTj1", "Texas", "Water Heating")
unique(raw_data$P3TEX15)
s1_processed |> filter(state2=="Texas",appliance=="Water Heating",state_assigned=="Texas",plan=="plan1")


print("\nComparison for Participant 11 - Colorado Heating:")
compare_values(raw_data, s1_processed, "R_263zmNZDB4Pqn9h", "Colorado", "Heating")

# Check if the discrepancy is consistent across different blocks/presentations
check_all_presentations <- function(raw_data, response_id, state_code, appliance_pattern) {
  participant_data <- raw_data %>%
    filter(ResponseId == response_id)
  
  all_cols <- names(participant_data)[str_detect(names(participant_data), 
                                               paste0("^[ADP]\\d+", state_code)) &
                                      str_detect(names(participant_data), appliance_pattern)]
  
  participant_data %>%
    select(all_of(all_cols)) %>%
    gather(key = "column", value = "value") %>%
    arrange(column)
}

# Example: Check all presentations of water heating for participant 1
print("\nAll presentations of water heating for Participant 1:")
check_all_presentations(raw_data, "R_2QMsYuHS385pTj1", "TEX", "15|16")



unique(raw_data$P3TEX15)
```



## Just refClass Percentage and state 2 Texas have the issues with family water heating = 5.26

r$> s1_processed |> filter(state2=="Texas",appliance=="Water Heating",state_assigned=="Texas",plan=="plan1") |> head(15)
# A tibble: 15 × 17
      id state1        state2 refClass   calc  edu             modality state_assigned id2               Duration__in_seconds_ appliance     family    state_avg plan  value     family_value state_avg_value
   <int> <chr>         <chr>  <chr>      <fct> <fct>           <chr>    <chr>          <chr>                             <dbl> <chr>         <dbl+lbl> <dbl+lbl> <chr> <dbl+lbl>        <dbl>           <dbl>
 1     1 Colorado      Texas  Percentage 1     Graduate degree P        Texas          R_2QMsYuHS385pTj1                  1008 Water Heating    5.26   4396      plan1  700              5.26            4396
 2     2 Colorado      Texas  Percentage 1     College degree  P        Texas          R_2tzIyZavpl1RZBY                  1126 Water Heating    5.26   4396      plan1 4396              5.26            4396
 3     3 Colorado      Texas  Percentage 1     College degree  P        Texas          R_3Gm1Y4QzSlyrEWo                   870 Water Heating    5.26   4396      plan1 4468              5.26            4396
 4     4 Colorado      Texas  Percentage 1     College degree  P        Texas          R_Djh2q728ibyNWjD                  2763 Water Heating    5.26   4396      plan1 1000              5.26            4396
 5     5 Colorado      Texas  Percentage 0     Graduate degree P        Texas          R_3fAXNbIZ7kFieSu                   920 Water Heating    5.26   4396      plan1 3756              5.26            4396
 6     6 Colorado      Texas  Percentage 0     Graduate degree P        Texas          R_1JECzl10KgckJXg                   878 Water Heating    5.26   4396      plan1 5200              5.26            4396
 7     7 Colorado      Texas  Percentage 1     Graduate degree P        Texas          R_C2IQAZim25sij4d                  2680 Water Heating    5.26   4396      plan1 4257              5.26            4396
 8     8 Colorado      Texas  Percentage 1     Some college    P        Texas          R_5bbi3tpMOhuGBIR                  1628 Water Heating    5.26   4396      plan1 5100              5.26            4396
 9     9 Colorado      Texas  Percentage 1     Graduate degree P        Texas          R_2BsVSAOpehXW9Cr                   724 Water Heating    5.26   4396      plan1 5217              5.26            4396
10    10 Colorado      Texas  Percentage 1     Some college    P        Texas          R_325F8wRln52w1QN                   913 Water Heating    5.26   4396      plan1 4468              5.26            4396
11    12 Colorado      Texas  kWh        1     Graduate degree A        Texas          R_abEpO6g4xKOlwwF                   644 Water Heating 5257      4396      plan1 8459           5257               4396
12    14 Colorado      Texas  USD        0     College degree  D        Texas          R_2VsaxwvgHXasQx3                   625 Water Heating 5257       400      plan1 4000           5257                400
13    24 Massachusetts Texas  USD        1     College degree  D        Texas          R_AEvC2EEL0GltodP                  1047 Water Heating 5257      4396      plan1 4000           5257               4396
14    36 Colorado      Texas  USD        0     Graduate degree D        Texas          R_1nO7uu36tUOSbfw                   390 Water Heating 5257      4396      plan1 4500           5257               4396
15    38 Massachusetts Texas  kWh        1     College degree  A        Texas          R_6f13I34krdFacjT                   973 Water Heating 5257      4396      plan1 4500           5257               4396

