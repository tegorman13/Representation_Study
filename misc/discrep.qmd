---
title: "Discrep_Patterns"
author:
- name: Thomas E. Gorman
  url: https://tegorman13.github.io/
  affiliations: 
  - name:  Communication and Cognition Lab, Purdue University, USA
    affiliation-url: https://web.ics.purdue.edu/~treimer/
lightbox: true
toc: false
code-fold: show
code-tools: true
execute:
  warning: false
---





## Study 1

```{r}
library(pacman)
pacman::p_load(dplyr,purrr,tidyr,here,tibble, haven,
               ggplot2,gt,knitr,kableExtra,ggh4x,ggdist,gghalves,patchwork,lme4,flextable)
options(digits=2, scipen=999, dplyr.summarise.inform=FALSE)
walk(c("fun_plot"), ~ source(here::here(paste0("Scripts/", .x, ".R"))))
theme_set(theme_nice())

s1 <- readRDS(here::here("data/s1_processed.rds"))
s2_long <- readRDS(here::here("data/s2_processed.rds"))

```



```{r}

s1 %>%
  filter(appliance != "Total kWh", plan == "plan1") %>%
  group_by(appliance, state, refClass) %>%
  mutate(distinct_state_avg = n_distinct(state_avg)) %>%
  ungroup() %>%
  filter(distinct_state_avg > 1) %>%
  group_by(appliance, state_avg, state, refClass) |> arrange(id)

s1 |> group_by(state,appliance,refClass) |> 
  mutate(state_avg=as.numeric(state_avg)) |> 
  mutate(n_distinct_family=n_distinct(family),
            n_distinct_state_avg=n_distinct(state_avg), 
            # paste a string of each distinct value, separated by a comma
            distinct_family=paste(unique(family),collapse=","),
            distinct_state_avg=paste(unique(state_avg),collapse=",")) |>
  filter(n_distinct_family>1 | n_distinct_state_avg>1) 

s1 %>%
  filter(appliance != "Total kWh", plan == "plan1") %>%
  group_by(appliance, state, refClass) %>%
  mutate(
    distinct_families = n_distinct(family),
    distinct_state_avgs = n_distinct(state_avg),
  ) %>%
  ungroup() %>%
  filter(distinct_families > 1 | distinct_state_avgs>1) %>%
  group_by(appliance, family, state, refClass) %>%
  summarise(n = n(), .groups = "drop") |> gt()


```



```{r}

state_code_map <- c(
  "CAL" = "California",
  "TEX" = "Texas",
  "COL" = "Colorado",
  "MASS" = "Massachusetts"
)


state_to_code <- state_code_map
code_to_state <- setNames(names(state_code_map), state_code_map)
lookup_code <- function(state) {
  if (state %in% names(state_to_code)) {
    return(state_to_code[[state]])
  } else if (state %in% names(code_to_state)) {
    return(code_to_state[[state]])
  } else {
    return(NA)  # Return NA if not found in either mapping
  }
}


correct_values <- tribble(
  ~state, ~appliance, ~family, ~state_avg,
  # Texas values
  "Texas", "Cooling", 6573, 4249,
  "Texas", "Heating", 6118, 5099,
  "Texas", "Water Heating", 5257, 4396,
  "Texas", "Refrigerator", 2639, 1318,
  "Texas", "Other Appliance", 8459, 7883,
  "Texas", "Total kWh", 29046, 22945,
  
  # California values
  "California", "Cooling", 2581, 1289,
  "California", "Heating", 6157, 5597,
  "California", "Water Heating", 5061, 4601,
  "California", "Refrigerator", 1266, 1055,
  "California", "Other Appliance", 7608, 6916,
  "California", "Total kWh", 22673, 19458,
  
  # Colorado values
  "Colorado", "Cooling", 697, 498,
  "Colorado", "Heating", 18052, 16411,
  "Colorado", "Water Heating", 11667, 5832,
  "Colorado", "Refrigerator", 1370, 1142,
  "Colorado", "Other Appliance", 7982, 6652,
  "Colorado", "Total kWh", 39768, 30535,
  
  # Massachusetts values
  "Massachusetts", "Cooling", 419, 322,
  "Massachusetts", "Heating", 26751, 19108,
  "Massachusetts", "Water Heating", 10543, 5070,
  "Massachusetts", "Refrigerator", 1230, 1025,
  "Massachusetts", "Other Appliance", 7350, 6682,
  "Massachusetts", "Total kWh", 46293, 32207
) |> 
  rowwise() |>
  mutate(state_abrv=lookup_code(state))




 s1 |> 
       filter(#appliance != "Total kWh", 
       plan == "plan1") %>%
        group_by(state, appliance, refClass) |> 
        mutate(n_distinct_family = n_distinct(family),
               n_distinct_state_avg = n_distinct(state_avg), 
               distinct_family = paste(unique(family), collapse = ","),
               distinct_state_avg = paste(unique(state_avg), collapse = ",")) |>
        filter(n_distinct_family > 1 | n_distinct_state_avg > 1) |> 
        group_by(state, appliance, refClass, family, state_avg) |> 
        mutate(state_avg_count = n_distinct(state_avg),
               family_count = n()) |> 
        ungroup() |> 
        group_by(state, appliance, refClass, state_avg) |> 
        mutate(state_avg_count = n()) |> 
        distinct(state, appliance, refClass, family, state_avg, family_count, state_avg_count) |> 
      arrange(state,appliance,refClass,-family_count) |> 
      rowwise() |> 
      mutate(fam_in = family %in% correct_values$family,
             state_in = state_avg %in% correct_values$state_avg) |>
       kable() # print(n=25)


# Function to check values
check_values <- function(data, reference) {
  # Join the datasets
  data %>%
    left_join(reference |> rename(family_true=family,state_true=state_avg), by = c("state" = "state_abrv", "appliance" = "appliance")) %>%
    mutate(
      # Convert to numeric to ensure proper comparison
      family_numeric = as.numeric(family),
      state_avg_numeric = as.numeric(state_avg),
      # Flag discrepancies (using a small tolerance for floating point differences)
      family_discrepant =family_numeric != family_true,
      state_avg_discrepant = state_avg_numeric != state_true
    )
}


discrepant_counts <- s1 %>%
  # Remove total kWh as specified
  #filter(appliance != "Total kWh") %>%
  # Use only one plan to avoid duplicates
  filter(plan == "plan1") %>%
  # Check against correct values
  check_values(correct_values) %>%
  select(id,id2,starts_with("sta"),starts_with("fam"),appliance,refClass) |> 
  # Filter to show only discrepant cases
  filter(family_discrepant | state_avg_discrepant) %>%
  # Get unique subject IDs and their discrepancies
  group_by(refClass,state) %>%
  summarise(
    discrepant_states = paste(unique(state), collapse = ", "),
    discrepant_appliances = paste(unique(appliance), collapse = ", "),
    n_family_discrepancies = sum(family_discrepant),
    n_state_avg_discrepancies = sum(state_avg_discrepant),
    .groups = 'drop'
  )


# Identify discrepant subjects
discrepant_subjects <- s1 %>%
  # Remove total kWh as specified
  #filter(appliance != "Total kWh") %>%
  # Use only one plan to avoid duplicates
  filter(plan == "plan1") %>%
  # Check against correct values
  check_values(correct_values) %>%
  select(id,id2,refClass,starts_with("sta"),starts_with("fam"),appliance) |> 
  # Filter to show only discrepant cases
  filter(family_discrepant | state_avg_discrepant) %>%
  # Get unique subject IDs and their discrepancies
  group_by(id, id2,refClass) %>%
  summarise(
    discrepant_states = paste(unique(state), collapse = ", "),
    discrepant_appliances = paste(unique(appliance), collapse = ", "),
    n_family_discrepancies = sum(family_discrepant),
    n_state_avg_discrepancies = sum(state_avg_discrepant),
    .groups = 'drop'
  )


discrepant_counts |> gt()
discrepant_subjects |> gt()


s1_discrep_ids <- discrepant_subjects |> pull(id) |> unique()

s1_discrep_ids
#saveRDS(s1_discrep_ids,here::here("data/s1_discrep_ids.rds"))

# for every combination of state, appliance, and refClass, calculate the number of distinct values of family, and of state_avg
s1 |> group_by(state,appliance,refClass) |> 
  filter(appliance != "Total kWh") %>%
  filter(!(id %in% s1_discrep_ids)) |>
  mutate(state_avg=as.numeric(state_avg)) |> 
  summarise(n_distinct_family=n_distinct(family),
            n_distinct_state_avg=n_distinct(state_avg), 
            # paste a string of each distinct value, separated by a comma
            distinct_family=paste(unique(family),collapse=","),
            distinct_state_avg=paste(unique(state_avg),collapse=",")) |>
  filter(n_distinct_family>1 | n_distinct_state_avg>1) 

# <!-- issue in slides where colorado cooling is shown as 489 in a few cases instead of 498 - all of the data has 498. 498 corresponds with total value as well  -->
s1 |> filter(state=="COL",appliance=="Cooling") |> pull(state_avg) |> unique() #498
s2_long |> filter(state=="Colorado",appliance=="AC") |> pull(state_avg) |> unique() #498


s1 |> select(id,id2,starts_with("sta"),starts_with("fam"),appliance,refClass,plan,value) |> check_values(correct_values) %>% 
filter(plan=="plan1") |> 
select(-state_f_dif,-state_p_dif,-plan,-state.y,-state_avg) |> ungroup() |> as_tibble() |> 
relocate(id,state, appliance,value,family_numeric,family_true,state_avg_numeric,state_true, family_discrepant,state_avg_discrepant) |>
# mutate to turn applilance, state and id columns into factors
mutate(across(c(appliance,state,id),factor)) |>
#reactable::reactable()
  DT::datatable(extensions = 'Buttons',
    options = list(
       dom = 'Blfrtip',
       buttons = list('copy', 'csv', 'excel', 'pdf', 'print'),
      pageLength = 25,
      autoWidth = TRUE
    ),
    filter = 'top') 

```


```{r}

haven::read_sav(here::here("data/Frequency & Probability Study 1 - 3-24-19.sav")) |> select(P3TEX15) |> unique()

s1 |> filter(id==18,plan=="plan1")

haven::read_sav(here::here("data/Frequency & Probability Study 1 - 3-24-19.sav")) |>
  filter(ResponseId == "R_vB56XspT1LqhrkB") |>
  # Select columns with non-NA values and not empty strings, handling character and numeric columns separately
  select(
    where(~ is.numeric(.) && !all(is.na(.))),
    where(~ is.character(.) && !all(is.na(.)) && !all(. == ""))
  ) |>
  # Remove columns that start with "AIN"
  select(-starts_with("AIN"))

haven::read_sav(here::here("data/Frequency & Probability Study 1 - 3-24-19.sav"))  |> select_if(~any(. ==5124)) |> 
  # filter out any NAs from any column that is left (we don't know the column names)
  filter_all(any_vars(!is.na(.)))

```



## Study 2

### Counts per unique value of family prior year, and state average

```{r}

correct_values_s2 <- tribble(
  ~state, ~appliance, ~family_exact, ~family_rounded, ~state_avg,
  # Texas values (Smith Family)
  "Texas", "Cooling", 6573, 7000, 4249,
  "Texas", "Heating", 6118, 6000, 5099,
  "Texas", "Water Heating", 5257, 5000, 4396,
  "Texas", "Refrigerator", 2639, 3000, 1318,
  "Texas", "Other Appliance", 8459, 8000, 7883,
  "Texas", "Total kWh", 29046, 29000, 22945,
  
  # California values (Adams Family)
  "California", "Cooling", 2581, 3000, 1289,
  "California", "Heating", 6157, 6000, 5597,
  "California", "Water Heating", 5061, 5000, 4601,
  "California", "Refrigerator", 1266, 1000, 1055,
  "California", "Other Appliance", 7608, 8000, 6916,
  "California", "Total kWh", 22673, 23000, 19458,
  
  # Colorado values (Wells Family)
  "Colorado", "Cooling", 697, 1000, 498,
  "Colorado", "Heating", 18052, 18000, 16411,
  "Colorado", "Water Heating", 11667, 12000, 5832,
  "Colorado", "Refrigerator", 1370, 1000, 1142,
  "Colorado", "Other Appliance", 7982, 8000, 6652,
  "Colorado", "Total kWh", 39768, 40000, 30535,
  
  # Massachusetts values (Davis Family)
  "Massachusetts", "Cooling", 419, 0, 322,
  "Massachusetts", "Heating", 26751, 27000, 19108,
  "Massachusetts", "Water Heating", 10543, 11000, 5070,
  "Massachusetts", "Refrigerator", 1230, 1000, 1025,
  "Massachusetts", "Other Appliance", 7350, 7000, 6682,
  "Massachusetts", "Total kWh", 46293, 46000, 32207
) %>%
  rowwise() %>%
  mutate(
    state_abrv = case_when(
      state == "Texas" ~ "TEX",
      state == "California" ~ "CAL",
      state == "Colorado" ~ "COL",
      state == "Massachusetts" ~ "MASS"
    ),
    app_abrv = case_when(
      appliance == "Cooling" ~ "AC",
      appliance == "Heating" ~ "HEAT",
      appliance == "Water Heating" ~ "WATER",
      appliance == "Refrigerator" ~ "REFRIG",
      appliance == "Other Appliance" ~ "OTHER",
      appliance == "Total kWh" ~ "TOTAL"
    ),
    family_name = case_when(
      state == "Texas" ~ "Smith Family",
      state == "California" ~ "Adams Family",
      state == "Colorado" ~ "Wells Family",
      state == "Massachusetts" ~ "Davis Family"
    ))






s2_long %>%
  filter( plan == "plan1") %>%
  group_by(appliance, rounded, state,pct_goal) %>%
  mutate(
    distinct_families = n_distinct(family),
    distinct_state_avg = n_distinct(state_avg),
  ) %>% 
  filter(distinct_families > 1 | distinct_state_avg > 1)  |> 
   group_by(appliance, rounded, state,pct_goal, family) |>
   mutate(family_count = n()) |>
   group_by(appliance, rounded, state,pct_goal, state_avg) |>
    mutate(state_avg_count = n()) |>
  distinct(rounded,state,refClass,appliance,family,state_avg,state_avg_count,family_count) |> 
     rowwise() |> 
  mutate(
    fam_in = if (rounded == "Rounded") {
      family %in% correct_values_s2$family_rounded
    } else {
      family %in% correct_values_s2$family_exact
    },
    state_in = state_avg %in% correct_values_s2$state_avg
  ) |> arrange(rounded,refClass,state,appliance,family_count) |> 
  relocate(rounded,pct_goal,refClass,state,appliance,family,family_count,state_avg,state_avg_count,fam_in,state_in) |> 
  kable()


  # ungroup() %>%
  # group_by(appliance, family, rounded, state) %>%
  # summarise(n = n(), .groups = "drop") 

```



### Discrepant Subjects

```{r}

s2_long %>%
  filter(plan == "plan1",
  id !="s2_208") %>% # s2_208 is just missing a value for a total column - but has all their app values
  group_by(appliance, rounded, state, pct_goal) %>%
  mutate(
    distinct_families = n_distinct(family),
    distinct_state_avg = n_distinct(state_avg),
  ) %>% 
  filter(distinct_families > 1 | distinct_state_avg > 1) %>%
  group_by(appliance, rounded, state, pct_goal, family) %>%
  mutate(family_count = n()) %>%
  group_by(appliance, rounded, state, pct_goal, state_avg) %>%
  mutate(state_avg_count = n()) %>%
  distinct(rounded, state, refClass, appliance, family, state_avg, 
          state_avg_count, family_count) %>%
  mutate(
    # Check family values
    fam_in = map2_lgl(rounded, family, ~ {
      if (.x == "Rounded") {
        .y %in% correct_values_s2$family_rounded
      } else {
        .y %in% correct_values_s2$family_exact
      }
    }),
    # Check state averages
    state_in = pmap_lgl(list(state, appliance, state_avg), function(s, a, sa) {
      correct_row <- correct_values_s2 %>%
        filter(state == s, app_abrv == a)
        #print(nrow(correct_row))  
      if(nrow(correct_row) == 0) FALSE else sa == correct_row$state_avg
    })
  ) %>%
  arrange(rounded, refClass, state, appliance, family_count) %>%
  relocate(rounded, pct_goal, refClass, state, appliance, family, 
          family_count, state_avg, state_avg_count, fam_in, state_in) |> kable()


discrepant_subjects_s2 <- s2_long |> 
  filter(plan == "plan1") |>
  group_by(id, rounded, refClass) |> 
  mutate(
    # Compute state_in based on exact match for state, appliance abbreviation, and state_avg
    state_in = pmap_lgl(list(state, appliance, state_avg), function(s, a, sa) {
      correct_row <- correct_values_s2 %>%
        filter(state == s, app_abrv == a)
      if (nrow(correct_row) == 0) FALSE else sa == correct_row$state_avg
    }),
    # Compute fam_in based on `rounded` value and appropriate family column in `correct_values_s2`
    fam_in = pmap_lgl(list(state, appliance, family, rounded), function(s, a, fam, rnd) {
      correct_row <- correct_values_s2 %>%
        filter(state == s, app_abrv == a)
      if (nrow(correct_row) == 0) {
        FALSE
      } else if (rnd == "Rounded") {
        fam == correct_row$family_rounded
      } else {
        fam == correct_row$family_exact
      }
    })
  )

discrepant_subjects_s2 |> filter(state_in==FALSE | fam_in==FALSE) |>  arrange(state, appliance,refClass,pct_goal,rounded) |> select(-calc,-edu, -plan,-state_dif) |> kable()

s2_discrep_ids <- discrepant_subjects_s2 |> filter(state_in==FALSE | fam_in==FALSE) |> pull(id) |> unique()
s2_discrep_ids
# saveRDS(s2_discrep_ids,here::here("data/s2_discrep_ids.rds"))


# mutate(
#   fam_in = if_else(rounded == "Rounded",
#                   family %in% correct_values_s2$family_rounded,
#                   family %in% correct_values_s2$family_exact),
# # Use `map_lgl` to evaluate each row individually
#   state_in = map_lgl(
#     seq_along(appliance),
#     ~ any(correct_values_s2$appliance[correct_values_s2$state_avg == state_avg[.x]] == appliance[.x])
#   ) )



```





```{r}


# 3 s2_185     2 USD      HEAT      10%      Rounded Colorado Calculator    Some graduate school   0.1  18000     16411 plan1 17000  -1000       589
# 4 s2_196     2 USD      HEAT      10%      Rounded Colorado Calculator    College degree         0.1  18000        NA plan1 17000  -1000        NA
# 5 s2_197     2 USD      HEAT      10%      Rounded Colorado Calculator    Some college           0.1  18000     16411 plan1 17000  -1000       589

#  s2 |>
#   mutate(id=paste0("s2_",row_number())) |> relocate(id) |> filter(id=="s2_196") |> 
#    select(-starts_with("AIN")) |> select(starts_with("HEAT"))


# s2 |> filter(id=="s2_196") |> select(starts_with("HEAT"))


s2_long |> filter(state=="Colorado",state_avg==1142,appliance=="WATER")

haven::read_sav(here::here("data/Frequency & Probability Study 2 - 3-24-19.sav")) |>
  mutate(id=paste0("s2_",row_number())) |> 
  relocate(id) |> filter(id=="s2_196") |> 
   select(-starts_with("AIN")) |> select(starts_with("HEAT"))


#s2 |> filter(id=="s2_208") |> select(starts_with("T"))
s2_long |> filter_all(any_vars(is.na(.)))

```


## Data after exclusions



### Study 1 - Subject counts 


```{r}

# number of unique ids per condition
s1 |> group_by(refClass) |> 
filter(!(id %in% s1_discrep_ids)) |>
rename("Reference Class" = refClass) |>
summarise(n=n_distinct(id)) |> gt() |> tab_header(title="Study 1: Number of unique IDs per condition")


s1 |> group_by(refClass,state) |> 
  filter(!(id %in% s1_discrep_ids)) |>
  rename("Reference Class" = refClass) |>
  summarise(n=n_distinct(id)) |> 
  rowwise() |> 
  mutate(state=lookup_code(state)) |> 
  pivot_wider(names_from=state,values_from=n) |>
  gt() |> tab_header(title="Study 1: Number of unique IDs per condition by state") 


s1 |> group_by(refClass,calc) |> 
  filter(!(id %in% s1_discrep_ids)) |>
  rename("Reference Class" = refClass) |>
  summarise(n=n_distinct(id)) |> 
  pivot_wider(names_from=calc,values_from=n) |>
  gt() |> tab_header(title="Study 1: Number of unique IDs per condition by calculation")




prop.table(xtabs(~refClass,s1)) |> kable()
prop.table(xtabs(~refClass+calc,s1)) |> kable()
prop.table(xtabs(~refClass+state,s1)) |> kable()


# s2_long |> group_by(id) |> summarise(nrc=n_distinct(refClass),npct=n_distinct(pct_goal),nround=n_distinct(rounded))

```


### Study 2 - Subject counts 
```{r}

s2_long |> group_by(refClass) |>
filter(!(id %in% s2_discrep_ids)) |>
rename("Reference Class" = refClass) |>
summarise(n=n_distinct(id)) |> gt() |> tab_header(title="Study 2: Number of unique IDs per condition")

s2_long |> group_by(refClass,calc) |>
filter(!(id %in% s2_discrep_ids)) |>
rename("Reference Class" = refClass) |>
mutate(calc=case_when(calc=="Calculator" ~ "Used Calculator",
                      calc=="No Calculator" ~ "No Calculator")) |>
summarise(n=n_distinct(id)) |>
pivot_wider(names_from=calc,values_from=n) |>
gt() |> tab_header(title="Study 2: Number of unique IDs per condition by calculation")


prop.table(xtabs(~refClass,s2_long)) |> kable()
prop.table(xtabs(~refClass+state,s2_long))
prop.table(xtabs(~refClass+calc,
s2_long |> mutate(calc=case_when(calc=="Calculator" ~ "Used Calculator",
                      calc=="No Calculator" ~ "No Calculator")))) |> kable()
```

##  Performance before and after exclusions

### Performance before and after exclusions - Study 1

```{r}
#| fig-width: 12
#| fig-height: 8

s1_agg <- s1 |> 
  filter(appliance !="Total kWh") |> 
  group_by(id,refClass,state,block,plan,calc,edu,pct_goal) |> 
  summarise(total_kWh = sum(value),orig_kWh=sum(family), 
            pct_change = round((orig_kWh-total_kWh)/orig_kWh,3), 
            n_change = sum(value!=family),
            state_p_dif=mean(state_p_dif),
            state_f_dif=mean(state_f_dif),
            n_less_avg = sum(less_avg),
            duration=first(Duration__in_seconds_)) |> 
  mutate(matched_goal = (pct_change == pct_goal), 
             error = pct_change - pct_goal,
            abs_error = abs(error),
            close_match = abs_error <= 0.02)

s1_agg4 <- s1_agg |> group_by(id,refClass) |> 
  summarise(mg=sum(matched_goal),n=n(), pct=mg/n) 


# s1_agg4 |> group_by(refClass) |> 
#   summarise(mean=mean(pct),sd=sd(pct),n=n()) |> 
#   gt() |> tab_header(title="Study 1: Performance before exclusions")

# s1_agg4 |> 
#   filter(!(id %in% s1_discrep_ids)) |> 
#   group_by(refClass) |> 
#   summarise(mean=mean(pct),sd=sd(pct),n=n()) |> 
#   gt() |> tab_header(title="Study 1: Performance after exclusions")



bind_rows(
  s1_agg4 |> 
    group_by(refClass) |> 
    summarise(
      mean = mean(pct),
      sd = sd(pct),
      n = n(),
      se=sd(pct)/sqrt(n),
      dataset = "Before exclusions"
    ),
  s1_agg4 |> 
    filter(!(id %in% s1_discrep_ids)) |> 
    group_by(refClass) |> 
    summarise(
      mean = mean(pct),
      sd = sd(pct),
      n = n(),
      se=sd(pct)/sqrt(n),
      dataset = "After exclusions"
    )
) |>
  pivot_wider(
    names_from = dataset,
    values_from = c(mean, sd, se,n),
    names_glue = "{dataset}_{.value}"
  ) |>
  gt() |>
  tab_header(
    title = "Study 1: Performance Before and After Exclusions"
  ) |>
  fmt_number(
    columns = contains("mean"),
    decimals = 2
  ) |>
  fmt_number(
    columns = contains("sd"),
    decimals = 2
  ) |>
  cols_label(
    refClass = "Reference Class",
    `Before exclusions_mean` = "Mean",
    `Before exclusions_sd` = "SD",
    `Before exclusions_se` = "SE",
    `Before exclusions_n` = "N",
    `After exclusions_mean` = "Mean",
    `After exclusions_sd` = "SD",
    `After exclusions_se` = "SE",
    `After exclusions_n` = "N"
  ) |>
  tab_spanner(
    label = "Before Exclusions",
    columns = starts_with("Before")
  ) |>
  tab_spanner(
    label = "After Exclusions",
    columns = starts_with("After")
  )



sp1b <- s1_agg4 |> 
  ggplot(aes(x=refClass,y=pct,fill=refClass)) +
  stat_summary(fun=mean, geom="bar") +
  stat_summary(fun.data=mean_cl_normal, geom="errorbar", width=0.2) +
  labs(title="Mean % meeting goal - Before Exclusions",
       x="Reference Class",
       y="% of trials meeting goal",
       fill="Reference Class") 

sp1a <- s1_agg4 |> 
  filter(!(id %in% s1_discrep_ids)) |>
  ggplot(aes(x=refClass,y=pct,fill=refClass)) +
  stat_summary(fun=mean, geom="bar") +
  stat_summary(fun.data=mean_cl_normal, geom="errorbar", width=0.2) +
    labs(title="Mean % meeting goal - After Exclusions",
       x="Reference Class",
       y="% of trials meeting goal",
       fill="Reference Class") 


sp2b <- s1_agg |> group_by(id,refClass) |> 
  summarise(mg=sum(matched_goal),n=n(), pct=mg/n) |> 
  ggplot(aes(x=pct)) +
  geom_bar(aes(fill=refClass)) +
  ggdist::stat_halfeye() +
  geom_rug(alpha=0.1) +
  stat_boxplot(width=0.5, alpha=0.6) +
  facet_wrap(~refClass) +
  labs(title="Distributions of % of trials that matched goal - Before Exclusions",
       x="% of trials (out of 4) that matched goal",
       y="Number of Participants",
       fill="Reference Class") +
  scale_y_continuous(limits=c(0,85),breaks=seq(0,85,5)) + scale_x_continuous(breaks=seq(0,1,.25),labels=scales::percent_format(accuracy=1)) 


sp2a <- s1_agg |> 
  filter(!(id %in% s1_discrep_ids)) |> 
  group_by(id,refClass) |> 
  summarise(mg=sum(matched_goal),n=n(), pct=mg/n) |> 
  ggplot(aes(x=pct)) +
  geom_bar(aes(fill=refClass)) +
  ggdist::stat_halfeye() +
  geom_rug(alpha=0.1) +
  stat_boxplot(width=0.5, alpha=0.6) +
  facet_wrap(~refClass) +
  labs(title="Distributions of % of trials that matched goal - After Exclusions",
       x="% of trials (out of 4) that matched goal",
       y="Number of Participants",
       fill="Reference Class") +
  scale_y_continuous(limits=c(0,85),breaks=seq(0,85,5)) + scale_x_continuous(breaks=seq(0,1,.25),labels=scales::percent_format(accuracy=1))

sp1b + sp1a

sp2b + sp2a

```

### After Exclusions - Study 2

```{r}
#| fig-width: 12
#| fig-height: 8



s2_agg1 <- s2_long |> 
  filter(appliance != "TOTAL") |> 
  group_by(id, refClass,pct,plan) |> 
  summarise(
    total_kWh = sum(value),
    orig_kWh = sum(family),
    pct_change = round((orig_kWh - total_kWh) / orig_kWh, 3),
    state_dif = mean(state_dif),
    .groups = "drop"
  ) |>
  mutate(matched_goal = (pct_change == pct),
  matched_goal2 = abs(pct_change-pct)<.03)

s2_agg4 <- s2_agg1|> group_by(id,refClass) |> 
  summarise(mg=sum(matched_goal),n=n(), pct=mg/n) 


bind_rows(
  s2_agg4 |> 
    group_by(refClass) |> 
    summarise(
      mean = mean(pct),
      sd = sd(pct),
      n = n(),
      se=sd(pct)/sqrt(n),
      dataset = "Before exclusions"
    ),
  s2_agg4 |> 
    filter(!(id %in% s2_discrep_ids)) |> 
    group_by(refClass) |> 
    summarise(
      mean = mean(pct),
      sd = sd(pct),
      n = n(),
      se=sd(pct)/sqrt(n),
      dataset = "After exclusions"
    )) |> 
    pivot_wider(names_from = dataset,
    values_from = c(mean, sd,se, n),
    names_glue = "{dataset}_{.value}") |> gt() |>
    tab_header(title = "Study 2: Performance Before and After Exclusions") |>
    cols_label(
    refClass = "Reference Class",
    `Before exclusions_mean` = "Mean",
    `Before exclusions_sd` = "SD",
    `Before exclusions_se` = "SE",
    `Before exclusions_n` = "N",
    `After exclusions_mean` = "Mean",
    `After exclusions_sd` = "SD",
    `After exclusions_se` = "SE",
    `After exclusions_n` = "N"
  ) |>
  tab_spanner(
    label = "Before Exclusions",
    columns = starts_with("Before")
  ) |>
  tab_spanner(
    label = "After Exclusions",
    columns = starts_with("After"))



s2p1b <- s2_agg4 |> 
  ggplot(aes(x=refClass,y=pct,fill=refClass)) +
  stat_summary(fun=mean, geom="bar") +
  stat_summary(fun.data=mean_cl_normal, geom="errorbar", width=0.2) +
  labs(title="Mean % meeting goal - Before Exclusions",
       x="Reference Class",
       y="% of trials meeting goal",
       fill="Reference Class")

s2p1a <- s2_agg4 |> 
  filter(!(id %in% s2_discrep_ids)) |>
  ggplot(aes(x=refClass,y=pct,fill=refClass)) +
  stat_summary(fun=mean, geom="bar") +
  stat_summary(fun.data=mean_cl_normal, geom="errorbar", width=0.2) +
  labs(title="Mean % meeting goal - After Exclusions",
       x="Reference Class",
       y="% of trials meeting goal",
       fill="Reference Class")


s2p2b <- s2_agg1 |> group_by(id,refClass) |>
  summarise(mg=sum(matched_goal),n=n(), pct=mg/n) |> 
  ggplot(aes(x=pct)) +
  geom_bar(aes(fill=refClass)) +
  ggdist::stat_halfeye() +
  geom_rug(alpha=0.1) +
  stat_boxplot(width=0.5, alpha=0.6) +
  facet_wrap(~refClass) +
  labs(title="Distributions of % of trials that matched goal - Before Exclusions",
       x="% of trials (out of 4) that matched goal",
       y="Number of Participants",
       fill="Reference Class") + 
       # make title text smaller
        theme(plot.title = element_text(size=10)) +
  scale_y_continuous(limits=c(0,85),breaks=seq(0,85,5)) + scale_x_continuous(breaks=seq(0,1,.25),labels=scales::percent_format(accuracy=1))

s2p2a <- s2_agg1 |> 
  filter(!(id %in% s2_discrep_ids)) |> 
  group_by(id,refClass) |> 
  summarise(mg=sum(matched_goal),n=n(), pct=mg/n) |> 
  ggplot(aes(x=pct)) +
  geom_bar(aes(fill=refClass)) +
  ggdist::stat_halfeye() +
  geom_rug(alpha=0.1) +
  stat_boxplot(width=0.5, alpha=0.6) +
  facet_wrap(~refClass) +
  labs(title="Distributions of % of trials that matched goal - After Exclusions",
       x="% of trials (out of 4) that matched goal",
       y="Number of Participants",
       fill="Reference Class") +
  scale_y_continuous(limits=c(0,85),breaks=seq(0,85,5)) + scale_x_continuous(breaks=seq(0,1,.25),labels=scales::percent_format(accuracy=1))

s2p1b + s2p1a

s2p2b + s2p2a


s1_agg4 |> 
    group_by(refClass) |> 
    summarise(
      mean = mean(pct),
      sd = sd(pct),
      n = n(),
      se=sd(pct)/sqrt(n),
      dataset = "Before exclusions"
    )

s1_agg4 |> 
    group_by(refClass) |> 
    summarise(
      mean = mean(pct),
      sd = sd(pct),
      n = n(),
      se=sd/sqrt(n),
      dataset = "Before exclusions"
    )

s1_agg4 |> 
    group_by(refClass) |> 
    summarise(
      mean = mean(pct),
      sd = sd(pct),
      n = n(),
      se = sd/sqrt(n),  # Using sd calculated above
      dataset = "After exclusions"
    )




``` 

