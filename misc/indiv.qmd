---
title: "Response Patterns"
execute:
  #echo: false
  warning: false
format:
  html: 
    grid:
      sidebar-width: 220px
      body-width: 1200px
      margin-width: 170px
      gutter-width: 1.0rem
  # hugo-md:
  #   include: true
  #   html-math-method: mathjax
  #   output-file: results_hugo.md
  gfm:
    echo: true
    output-file: indiv_gfm.md
---


```{r}
library(pacman)
pacman::p_load(dplyr,purrr,tidyr,here, haven,tibble,ggplot2,gt,ggh4x,lme4,flextable,ggdist)

#https://arelbundock.com/posts/quarto_figures/index.html
knitr::opts_chunk$set(
    out.width = "75%", # enough room to breath
    fig.width = 6,     # reasonable size
    fig.asp = 0.618,   # golden ratio
    fig.align = "center" # mostly what I want
)

out2fig = function(out.width, out.width.default = 0.7, fig.width.default = 6) {
    fig.width.default * out.width / out.width.default 
}


s1 <- readRDS(here::here("data/s1_processed.rds")) |> 
  filter(!(id %in% readRDS(here::here("data/s1_discrep_ids.rds")))) |> 
  filter(!(id %in% readRDS(here::here("data/s1_grp_outlier_ids.rds")))) |>
  mutate(refClass = factor(refClass, levels=c("kWh","Percentage","USD")))

s2_long <- readRDS(here::here("data/s2_processed.rds")) |> 
  filter(!(id %in% readRDS(here::here("data/s2_discrep_ids.rds")))) |> 
  filter(!(id %in% readRDS(here::here("data/s2_grp_outlier_ids.rds"))) ) |>
  mutate(refClass = factor(refClass, levels=c("kWh","Percentage","USD")))





s1_agg <- s1 |> 
    filter(appliance !="Total kWh") |> 
    group_by(id,refClass,state,block,plan,edu,pct_goal,calc) |> 
    summarise(total_kWh = sum(value),orig_kWh=sum(family), 
                pct_change = abs(round((orig_kWh-total_kWh)/orig_kWh,3)), 
                n_change = sum(value!=family),
                state_p_dif=mean(state_p_dif),
                state_f_dif=mean(state_f_dif),
                n_less_avg = sum(less_avg),
                duration=first(Duration__in_seconds_)) |> 
    mutate(matched_goal = (pct_change == pct_goal), 
                error = pct_change - pct_goal,
                abs_error = abs(error),
                log_abs_error=log(abs(error)+.007), 
                close_match = abs_error <= 0.02) |>
    ungroup() |> # Add ungroup here
        mutate(
            accuracy_level = factor(
                case_when(
                    abs_error == 0.00 ~ "Exact match",
                    abs_error <= 0.05 ~ "0.01-5% error",
                    TRUE ~ "Over 5% error"  # Capture all remaining cases
                ), 
                levels = c("Exact match", "0.01-5% error", "Over 5% error"),
                ordered = TRUE
            )
        ) |> relocate(accuracy_level, .after= "pct_change")



s1_agg4 <- s1_agg |> group_by(id,refClass,calc) |> 
    mutate(n_accuracy = n_distinct(accuracy_level)) |> 
    summarise(
    mg=sum(matched_goal),
    mgc=sum(close_match),
    n=n(), 
    pct=mg/n,
    pct_close=mgc/n,
    mean_pct_change=mean(pct_change),
    mean_abs_error=mean(abs_error),
    mean_log_abs_error=mean(log_abs_error),
    n_accuracy=first(n_accuracy)) |> 
    mutate(accuracy_level = factor(
            case_when(
                mean_abs_error < 0.02 ~ "Exact match",
                mean_abs_error <= 0.05 ~ "0.01-5% error",
                TRUE ~ "Over 5% error"  # Capture all remaining cases
            ), 
            levels = c("Exact match", ".01-5% error", "Over 5% error"),
            ordered = TRUE
        ))
```








## Study 1 - comparison against state average

```{r}
#| fig-asp: .8

#| 
s2_long |> filter(id %in% unique(s2_long$id)[1:30]) |> 
  filter(appliance!="TOTAL",state=="California") |> 
  ggplot(aes(x=appliance,y=value)) + geom_point(aes(shape=plan)) +
  geom_point(aes(y=state_avg),color="red") +
  geom_point(aes(y=family),color="blue") +
  facet_wrap(~id) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
#| fig.height: 13
#| fig.width: 12





s2_long |> filter(id %in% unique(s2_long$id)[1:30]) |> 
  filter(appliance!="TOTAL",state=="California") |> 
  ggplot(aes(x=appliance,y=value)) + geom_point(aes(shape=plan)) +
  geom_point(aes(y=state_avg),color="red") +
  geom_point(aes(y=family),color="blue") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))



s1 |> 
filter(appliance !="Total kWh") |> 
group_by(id,refClass,state,block,plan,calc,edu,pct_goal) |> 
mutate(total_kWh = sum(value),orig_kWh=sum(family), 
        pct_change = round((orig_kWh-total_kWh)/orig_kWh,3), 
        n_change = sum(value!=family),
        state_p_dif=mean(state_p_dif),
        state_f_dif=mean(state_f_dif),
        n_less_avg = sum(less_avg),
        duration=first(Duration__in_seconds_)) |> 
mutate(matched_goal = (pct_change == pct_goal), 
            error = pct_change - pct_goal,
        abs_error = abs(error)) |> 
          filter(appliance!="TOTAL",state=="CAL",value<20000) |> 
  ggplot(aes(x=appliance,y=value)) + geom_point(aes(shape=matched_goal)) +
  geom_point(aes(y=state_avg),color="red") +
  geom_point(aes(y=family),color="blue") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

s1 |> 
filter(appliance !="Total kWh") |> 
group_by(id,refClass,state,block,plan,calc,edu,pct_goal) |> 
mutate(total_kWh = sum(value),orig_kWh=sum(family), 
        pct_change = round((orig_kWh-total_kWh)/orig_kWh,3), 
        n_change = sum(value!=family),
        state_p_dif=mean(state_p_dif),
        state_f_dif=mean(state_f_dif),
        n_less_avg = sum(less_avg),
        duration=first(Duration__in_seconds_)) |> 
mutate(matched_goal = (pct_change == pct_goal), 
            error = pct_change - pct_goal,
        abs_error = abs(error)) |> 
          filter(appliance!="TOTAL",state=="CAL",value<20000) |> 
  ggplot(aes(x=appliance,y=value)) + geom_point(aes(shape=matched_goal)) +
  geom_point(aes(y=state_avg),color="red") +
  geom_point(aes(y=family),color="blue") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  facet_wrap(~matched_goal)


s1 |> 
filter(appliance !="Total kWh") |> 
group_by(id,refClass,state,block,plan,calc,edu,pct_goal) |> 
mutate(total_kWh = sum(value),orig_kWh=sum(family), 
        pct_change = round((orig_kWh-total_kWh)/orig_kWh,3), 
        n_change = sum(value!=family),
        state_p_dif=mean(state_p_dif),
        state_f_dif=mean(state_f_dif),
        n_less_avg = sum(less_avg),
        duration=first(Duration__in_seconds_)) |> 
mutate(matched_goal = (pct_change == pct_goal), 
            error = pct_change - pct_goal,
        abs_error = abs(error)) |> 
          filter(appliance!="TOTAL",state=="CAL",value<20000) |> 
  ggplot(aes(x=appliance,y=value)) + 
  geom_jitter(aes(color=matched_goal)) +
geom_point(aes(y=state_avg),color="red",size=10) +
  geom_point(aes(y=family),color="blue",size=5) 


s1 |> 
filter(appliance !="Total kWh") |> 
group_by(id,refClass,state,block,plan,calc,edu,pct_goal) |> 
mutate(total_kWh = sum(value),orig_kWh=sum(family), 
        pct_change = round((orig_kWh-total_kWh)/orig_kWh,3), 
        n_change = sum(value!=family),
        state_p_dif=mean(state_p_dif),
        state_f_dif=mean(state_f_dif),
        n_less_avg = sum(less_avg),
        duration=first(Duration__in_seconds_)) |> 
mutate(matched_goal = (pct_change == pct_goal), 
            error = pct_change - pct_goal,
        abs_error = abs(error)) |> 
          filter(appliance!="TOTAL",value<20000,family<25000) |> 
  ggplot(aes(x=appliance,y=value)) + 
  geom_jitter(aes(color=matched_goal)) +
 # gghalves::geom_half_violin(aes(fill=matched_goal)) +
  geom_boxplot(aes(fill=matched_goal),alpha=.5) +
geom_point(aes(y=state_avg),color="red",size=7,shape=8) +
  geom_point(aes(y=family),color="blue",size=7,shape=17) +
  facet_wrap(~state)



s1 |> 
filter(appliance !="Total kWh") |> 
group_by(id,refClass,state,block,plan,calc,edu,pct_goal) |> 
mutate(total_kWh = sum(value),orig_kWh=sum(family), 
        pct_change = round((orig_kWh-total_kWh)/orig_kWh,3), 
        n_change = sum(value!=family),
        state_p_dif=mean(state_p_dif),
        state_f_dif=mean(state_f_dif),
        n_less_avg = sum(less_avg),
        duration=first(Duration__in_seconds_)) |> 
mutate(matched_goal = (pct_change == pct_goal), 
            error = pct_change - pct_goal,
        abs_error = abs(error)) |> 
          filter(appliance!="TOTAL",value<20000,family<25000) |> 
  ggplot(aes(x=appliance,y=state_p_dif)) + 
  geom_jitter(aes(color=matched_goal)) +
  geom_point(aes(y=state_avg),color="red",size=10) +
  geom_point(aes(y=family),color="blue",size=5)

s1 |> 
filter(appliance !="Total kWh") |> 
group_by(id,refClass,state,block,plan,calc,edu,pct_goal,appliance) |> 
summarize(total_kWh = sum(value),orig_kWh=sum(family), 
            adjust=orig_kWh-total_kWh,
        pct_change = round((orig_kWh-total_kWh)/orig_kWh,3), 
        n_change = sum(value!=family),
        state_p_dif=mean(state_p_dif),
        state_f_dif=mean(state_f_dif),
        n_less_avg = sum(less_avg),
        duration=first(Duration__in_seconds_)) |> 
mutate(matched_goal = (pct_change == pct_goal), 
            error = pct_change - pct_goal,
        abs_error = abs(error)) |> 
          filter(appliance!="TOTAL") |> 
  ggplot(aes(x=appliance,y=adjust)) + 
  geom_jitter(aes(color=matched_goal)) +
  facet_wrap(~state)

```



```{r}



s1_agg2 <- s1 |> 
    filter(appliance !="Total kWh") |> 
    group_by(id,refClass,state,block,plan,calc,edu,pct_goal) |> 
    summarise(total_kWh = sum(value),orig_kWh=sum(family), 
                pct_change = round((orig_kWh-total_kWh)/orig_kWh,3), 
                n_change = sum(value!=family),
                state_p_dif=mean(state_p_dif),
                state_f_dif=mean(state_f_dif),
                n_less_avg = sum(less_avg),
                duration=first(Duration__in_seconds_)) |> 
    mutate(matched_goal = (pct_change == pct_goal), 
                error = pct_change - pct_goal,
                abs_error = abs(error),
                log_abs_error=log(abs(error)+.007), 
                close_match = abs_error <= 0.03) |>
    ungroup() |> # Add ungroup here
        mutate(
            accuracy_level = factor(
                case_when(
                    abs_error == 0.00 ~ "Exact match",
                    abs_error <= 0.02 ~ "0.01-2% error",
                    abs_error <= 0.15 ~ "2.01-15% error",
                    TRUE ~ "Over 15% error"  # Capture all remaining cases
                ), 
                levels = c("Exact match", "0.01-2% error", "2.01-15% error", "Over 15% error"),
                ordered = TRUE
            )
        ) |> relocate(accuracy_level, .after= "pct_change")


s1_agg4 <- s1_agg2 |> group_by(id,refClass,calc) |> 
    mutate(n_accuracy = n_distinct(accuracy_level)) |> 
    summarise(mg=sum(matched_goal),n=n(), pct=mg/n,mean_pct_change=mean(pct_change),
    mean_abs_error=mean(abs_error),
    mean_log_abs_error=mean(log_abs_error),
    n_accuracy=first(n_accuracy)) |> 
    mutate(accuracy_level = factor(
            case_when(
                mean_abs_error < 0.02 ~ "Exact match",
                mean_abs_error <= 0.02 ~ "0.01-2% error",
                mean_abs_error <= 0.15 ~ "2.01-15% error",
                TRUE ~ "Over 15% error"  # Capture all remaining cases
            ), 
            levels = c("Exact match", "0.01-2% error", "2.01-15% error", "Over 15% error"),
            ordered = TRUE
        ))


s1_agg2 |> 
  ggplot(aes(x =log_abs_error,fill=refClass)) +
  geom_density(alpha=.5) +
  geom_boxplot(aes(x =log_abs_error,fill=refClass),y=-.1, width=.1, alpha = 0.5) 

library(ggridges)
library(ggstance)
ggplot(s1_agg2, aes(y = refClass, x = log_abs_error, color = refClass)) +
  geom_density_ridges(aes(fill = refClass), alpha = 0.2, scale = 0.5,
                      jittered_points = TRUE, point_alpha = 0.7,point_size=.4,
                      position = position_raincloud(width = 0.05, height = 0.3,
                                                    ygap = 0.05)) +
  geom_boxploth(width = 0.05, alpha = 0.2, outlier.shape = NA, show.legend = FALSE) +
  #scale_y_discrete(expand = expansion(mult = c(0.2, 0.4))) +
 # guides(fill = "none", color = guide_legend(reverse = TRUE)) +
  guides(fill = "none", color = "none") +
  labs(x = "Log Absolute Deviation", y = "Reference Class", color = "Reference Class") +
  theme(legend.position = "top")


s1_agg2 |> 
  ggplot(aes(x = log_abs_error,fill=refClass,col=refClass)) +
  ggdist::stat_halfeye(alpha=.7) +
    geom_point(
    aes(y = -.05),
    size = 4, alpha = 0.75,
    shape = 21,
    position = position_jitter(
      height = 0.01,
      seed = 2343
    )
  ) +
  facet_wrap(~ refClass,ncol=1) + ggtitle("Log-transformed error density by reference class")

s1_agg4 |> 
  ggplot(aes(x = mean_log_abs_error,fill=refClass,col=refClass)) +
  ggdist::stat_halfeye(alpha=.7) +
    geom_point(
    aes(y = -.1),
    size = 2, alpha = 0.75,
    shape = 21,
    position = position_jitter(
      height = 0.01,
      seed = 2343
    )
  ) +
  facet_wrap(~ refClass,ncol=1) + ggtitle("Log-transformed error density by reference class")


```




## Study 2 - comparison against state average



```{r}
#| fig.height: 13
#| fig.width: 12

s2_long |> 
  filter(appliance != "TOTAL") |> 
  group_by(id, refClass, appliance, state, pct_goal, pct, rounded, block, plan, calc, edu) |> 
  mutate(
    total_kWh = sum(value),
    orig_kWh = sum(family),
    pct_change = round((orig_kWh - total_kWh) / orig_kWh, 3),
    state_dif = mean(state_dif),
    .groups = "drop"
  ) |>
  mutate(matched_goal = (pct_change == pct),
  matched_goal2 = abs(pct_change-pct)<.03) |> 
    ggplot(aes(x=appliance,y=value)) + geom_point(aes(shape=matched_goal)) +
    geom_point(aes(y=state_avg),color="red") +
    geom_point(aes(y=family),color="blue") +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    facet_wrap(state~matched_goal,scales="free_y")


s2_long |> 
  filter(appliance != "TOTAL") |> 
  group_by(id, refClass, appliance, state, pct_goal, pct, rounded, block, plan, calc, edu) |> 
  mutate(
    total_kWh = sum(value),
    orig_kWh = sum(family),
    pct_change = round((orig_kWh - total_kWh) / orig_kWh, 3),
    state_dif = mean(state_dif),
    .groups = "drop"
  ) |>
  mutate(matched_goal = (pct_change == pct),
  matched_goal2 = abs(pct_change-pct)<.03) |> 
    ggplot(aes(x=appliance,y=value)) + geom_point(aes(shape=matched_goal)) +
    geom_point(aes(y=state_avg),color="red") +
    geom_point(aes(y=family),color="blue") +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    facet_wrap(refClass~state,scales="free_y") +
    labs(title="Study 2 - plans vs. state averages and prior year values",subtitle="Blue points are prior year values, red points are state averages, and black points are current year values")


library(ggplot2)
library(dplyr)
s2_long %>%
  filter(appliance != "TOTAL") %>%
  group_by(id, refClass, appliance, state, pct_goal, pct, rounded, block, plan, calc, edu) %>%
  mutate(
    total_kWh = sum(value),
    orig_kWh = sum(family),
    pct_change = round((orig_kWh - total_kWh) / orig_kWh, 3),
    state_dif = mean(state_dif),
    .groups = "drop"
  ) %>%
  mutate(
    matched_goal = (pct_change == pct),
    matched_goal2 = abs(pct_change - pct) < 0.03
  ) %>%
  ggplot(aes(x = appliance)) +
  # Points for current plan, with conditional color and shape for matched goal
  geom_point(aes(
    y = value,
    color = ifelse(matched_goal2, "Matched Goal", "Current Plan"),
    shape = ifelse(matched_goal2, "Matched Goal", "Current Plan"),
    size = ifelse(matched_goal2, 5, 2),  # Larger size for matched goal
    alpha = ifelse(matched_goal2, 1, 0.6),  # Less transparency for matched goal
    stroke = ifelse(matched_goal2, 1.5, 0)  # Outline for matched goal points
  )) +
  # Points for state average (red) with color mapped for legend
  geom_point(aes(y = state_avg, color = "State Average"), shape = 17, size = 3) +
  # Points for family prior year (blue) with color mapped for legend
  geom_point(aes(y = family, color = "Prior Year (Family)"), shape = 15, size = 3) +
  # Custom colors for each legend entry
  scale_color_manual(
    values = c(
      "Matched Goal" = "#00FF00",  # Bright green for matched goal
      "Current Plan" = "black",
      "State Average" = "red",
      "Prior Year (Family)" = "blue"
    ),
    name = "Legend"
  ) +
  scale_shape_manual(
    values = c(
      "Matched Goal" = 8,  # Star shape for matched goal
      "Current Plan" = 16  # Default shape for current plan
    )
  ) +
  scale_size_continuous(range = c(2, 1)) +  # Use continuous scale for size
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  facet_wrap(refClass ~ state, scales = "free_y") +
  labs(
    title = "Study 2 - Plans vs. State Averages and Prior Year Values",
    subtitle = "Blue points are prior year values, red points are state averages, black points are current plans, bright green star points indicate plans that match goal"
  )


```


```{r}
#| fig.height: 13
#| fig.width: 12

s2_long |> 
  filter(appliance != "TOTAL") |> 
  group_by(id, refClass, appliance, state, pct_goal, pct, rounded, block, plan, calc, edu) |> 
  mutate(
    total_kWh = sum(value),
    orig_kWh = sum(family),
    pct_change = round((orig_kWh - total_kWh) / orig_kWh, 3),
    state_dif = mean(state_dif),
    .groups = "drop"
  ) |>
  mutate(
    matched_goal = (pct_change == pct),
    matched_goal2 = abs(pct_change-pct) < .03
  ) |> 
  ggplot(aes(x = appliance)) + 
    # Non-matching plans (plotted first, in background)
    geom_point(data = . %>% filter(!matched_goal2),
               aes(y = value, color = "Plan (Not Matching)", shape = "Plan"), 
               size = 1, alpha = 0.4) +
    # Matching plans
    geom_point(data = . %>% filter(matched_goal2),
               aes(y = value, color = "Plan (Matching Goal)", shape = "Plan"), 
               size = 1.5) +
    # Prior year values
    geom_point(aes(y = family, color = "Prior Year", shape = "Prior Year"), 
               size = 2.5) +
    # State averages with star shape, plotted last and largest
    geom_point(aes(y = state_avg, color = "State Average", shape = "State Average"), 
               size = 2, stroke = 2) +
    scale_color_manual(
      name = "Values",
      values = c(
        "State Average" = "#FF0000",     # Bright red
        "Prior Year" = "#4169E1",        # Royal blue
        "Plan (Matching Goal)" = "#228B22",
        "Plan (Not Matching)" = "#CD5C5C"
      )
    ) +
    scale_shape_manual(
      name = "Type",
      values = c(
        "State Average" = 8,    # Star
        "Prior Year" = 17,      # Triangle
        "Plan" = 16            # Circle
      )
    ) +
    theme_minimal() +
    theme(
      axis.text.x = element_text(angle = 45, hjust = 1),
      panel.grid.minor = element_blank(),
      strip.background = element_rect(fill = "lightgray", color = NA),
      strip.text = element_text(face = "bold"),
      legend.position = "bottom",
      legend.title = element_text(face = "bold")
    ) +
    facet_wrap(refClass ~ state, scales = "free_y") +
    labs(
      title = "Study 2 - Plans vs. State Averages and Prior Year Values",
      x = "Appliance",
      y = "Value"
    )
```



```{r}

# Assuming you have a data frame 's2_long' with energy literacy scores ('els')
# and a data frame 's2_agg' with planning data

# Calculate the deviation of each participant's plan from the state average and family usage
s2_long <- s2_long |>
  mutate(dev_state = abs(value - state_avg),
         dev_family = abs(value - family))

# Merge energy literacy scores
s2_long <- merge(s2_long, s2_agg[, c("id", "els")], by = "id")

# Model the relationship between energy literacy and deviations
model_dev_state <- lm(dev_state ~ els * appliance, data = s2_long)
model_dev_family <- lm(dev_family ~ els * appliance, data = s2_long)

summary(model_dev_state)
summary(model_dev_family)

# Visualize the relationship
ggplot(s2_long, aes(x = els, y = dev_state, color = appliance)) +
  geom_point() +
  geom_smooth(method = "lm") +
  facet_wrap(~appliance) +
  labs(title = "Deviation from State Average vs. Energy Literacy")

ggplot(s2_long, aes(x = els, y = dev_family, color = appliance)) +
  geom_point() +
  geom_smooth(method = "lm") +
  facet_wrap(~appliance) +
  labs(title = "Deviation from Family Usage vs. Energy Literacy")
```





```{r}


s2_agg <- s2_long |> 
  filter(appliance != "TOTAL") |> 
  group_by(id,refClass,calc, state,pct,pct_goal,plan,rounded) |> 
  summarise(
    total_kWh = sum(value),
    orig_kWh = sum(family),
    pct_change = round((orig_kWh - total_kWh) / orig_kWh, 3),
    state_dif = mean(state_dif),
    .groups = "drop"
  ) |>
  mutate(
    matched_goal = (pct_change == pct),
    close_match = abs(pct_change - pct) <= 0.02,
                error = pct_change - pct,
                abs_error = abs(error),
                log_abs_error=log(abs(error)+.007)) |> 
      ungroup() |> 
        mutate(
            accuracy_level = factor(
                case_when(
                    abs_error == 0.00 ~ "Exact match",
                    abs_error <= 0.05 ~ "0.01-5% error",
                    TRUE ~ "Over 5% error"  # Capture all remaining cases
                ), 
                levels = c("Exact match","0.01-5% error", "Over 5% error"),
                ordered = TRUE
            )
        )

s2_agg4 <- s2_agg |> group_by(id,refClass,calc) |> 
    mutate(n_accuracy = n_distinct(accuracy_level)) |> 
    summarise(
    mg=sum(matched_goal),
    mgc=sum(close_match),
    n=n(), 
    pct=mg/n,
    pct_close=mgc/n,
    mean_pct_change=mean(pct_change),
    mean_abs_error=mean(abs_error),
    mean_log_abs_error=mean(log_abs_error),
    n_accuracy=first(n_accuracy)) |> 
    mutate(accuracy_level = factor(
            case_when(
                mean_abs_error < 0.02 ~ "Exact match",
                mean_abs_error <= 0.05 ~ ".01-5% error",
                TRUE ~ "Over 5% error"  # Capture all remaining cases
            ), 
            levels = c("Exact match", "01-5% error", "Over 5% error"),
            ordered = TRUE
        ))
```



```{r}

# Example: Use k-means clustering on participant-level mean accuracy measures
participant_summary <- s2_agg %>%
  group_by(id) %>%
  summarize(mean_log_error = mean(log_abs_error),
            mean_els = mean(els),
            mean_pct_correct = mean(accuracy_level == "exact_match"))

# Run clustering (e.g., 3 clusters)
set.seed(123)
km <- kmeans(participant_summary[, c("mean_log_error", "mean_els", "mean_pct_correct")], centers = 3)

participant_summary$cluster <- factor(km$cluster)

ggplot(participant_summary, aes(x = mean_els, y = mean_log_error, color = cluster)) +
  geom_point(alpha = 0.7) +
  theme_minimal() +
  labs(x = "Mean Energy Literacy", y = "Mean Log Absolute Error",
       title = "Clustering Participants by Accuracy and Literacy",
       color = "Cluster")


```



```{r}
#| eval: false
# Assuming you have a data frame 's2_long' with energy literacy scores ('els')
# and a data frame 's2_agg' with planning data

# Calculate the deviation of each participant's plan from the state average and family usage
s2_long <- s2_long |>
  mutate(dev_state = abs(value - state_avg),
         dev_family = abs(value - family))

# Merge energy literacy scores
s2_long <- s2_long |> left_join(s2_agg, by = c("id", "refClass", "calc", "state", "pct", "pct_goal", "plan", "rounded", "els"))

# Model the relationship between energy literacy and deviations
model_dev_state <- lm(dev_state ~ els * appliance, data = s2_long)
model_dev_family <- lm(dev_family ~ els * appliance, data = s2_long)

summary(model_dev_state)
summary(model_dev_family)

# Visualize the relationship
ggplot(s2_long, aes(x = els, y = dev_state, color = appliance)) +
  geom_point() +
  geom_smooth(method = "lm") +
  facet_wrap(~appliance) +
  labs(title = "Deviation from State Average vs. Energy Literacy")

ggplot(s2_long, aes(x = els, y = dev_family, color = appliance)) +
  geom_point() +
  geom_smooth(method = "lm") +
  facet_wrap(~appliance) +
  labs(title = "Deviation from Family Usage vs. Energy Literacy")



# Prepare the data for clustering (e.g., using the deviations from state average or family usage)
cluster_data <- s2_long |>
  group_by(id, appliance) |>
  summarize(mean_dev_state = mean(dev_state),
            mean_dev_family = mean(dev_family)) |>
  pivot_wider(names_from = appliance, values_from = c(mean_dev_state, mean_dev_family)) |>
  ungroup() |>
  select(-id) # Remove ID for clustering

# Scale the data
cluster_data_scaled <- scale(cluster_data)

# Determine the optimal number of clusters (e.g., using the elbow method)
wss <- (nrow(cluster_data_scaled) - 1) * sum(apply(cluster_data_scaled, 2, var))
for (i in 2:15) wss[i] <- sum(kmeans(cluster_data_scaled, centers = i)$withinss)
plot(1:15, wss, type = "b", xlab = "Number of Clusters", ylab = "Within groups sum of squares")

# Perform k-means clustering (e.g., with 3 clusters)
kmeans_result <- kmeans(cluster_data_scaled, centers = 3)

# Add cluster assignments to the original data
s2_long$cluster <- kmeans_result$cluster[match(s2_long$id, unique(s2_long$id))]

# Visualize the clusters
ggplot(s2_long, aes(x = appliance, y = value, color = factor(cluster))) +
  geom_point() +
  facet_wrap(~cluster) +
  labs(title = "Clusters of Planning Strategies")


# Model the relationship between calculator use, reference class, and absolute error
model_calc <- lm(log_abs_error ~ calc * refClass, data = s2_long)
summary(model_calc)

# Visualize the relationship
ggplot(s2_long, aes(x = refClass, y = log(abs_error), fill = calc)) +
  geom_boxplot() +
  labs(title = "Planning Accuracy by Calculator Use and Reference Class")

```

