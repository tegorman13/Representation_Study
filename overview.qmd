---
title: "Effect of Reference Class on Planning to Conserve"
author:
- name: Thomas E. Gorman
  url: https://tegorman13.github.io/
  affiliations: 
  - name:  Communication and Cognition Lab, Purdue University, USA
    affiliation-url: https://web.ics.purdue.edu/~treimer/
#lightbox: true
toc: false
code-fold: true
code-tools: true
execute:
  #echo: false
  warning: false
format:
  html: 
    grid:
      sidebar-width: 220px
      body-width: 1200px
      margin-width: 170px
      gutter-width: 1.0rem
  hugo-md:
    include: true
    html-math-method: mathjax
    output-file: overview_hugo.md
  gfm:
    echo: true
    output-file: overview_gfm.md
---

```{r}

pacman::p_load(dplyr,purrr,tidyr,here,tibble,brms,rstan,bayestestR,emmeans,tidybayes,modelsummary,
               ggplot2,gt,knitr,kableExtra,ggh4x,lme4,flextable,pander)
options(digits=2, scipen=999, dplyr.summarise.inform=FALSE)
walk(c("fun_plot"), ~ source(here::here(paste0("Scripts/", .x, ".R"))))
theme_set(theme_nice())

s1 <- readRDS(here::here("data/s1_processed.rds")) |> filter(!(id %in% readRDS(here::here("data/s1_discrep_ids.rds"))))
s2_long <- readRDS(here::here("data/s2_processed.rds")) |> filter(!(id %in% readRDS(here::here("data/s2_discrep_ids.rds"))))

state_code_map <- c(
  "CAL" = "California",
  "TEX" = "Texas",
  "COL" = "Colorado",
  "MASS" = "Massachusetts"
)


state_to_code <- state_code_map
code_to_state <- setNames(names(state_code_map), state_code_map)
lookup_code <- function(state) {
  if (state %in% names(state_to_code)) {
    return(state_to_code[[state]])
  } else if (state %in% names(code_to_state)) {
    return(code_to_state[[state]])
  } else {
    return(NA)  # Return NA if not found in either mapping
  }
}

```



```{r}


s1 |> group_by(refClass) |> 
    rename("Reference Class" = refClass) |>
    summarise(n=n_distinct(id)) |> 
    pander::pandoc.table(caption="Study 1: Number of unique IDs per condition")


s1 |> group_by(refClass,state) |> 
    rename("Reference Class" = refClass) |>
    summarise(n=n_distinct(id)) |> 
    rowwise() |> 
    mutate(state=lookup_code(state)) |> 
    pivot_wider(names_from=state,values_from=n) |>
    pander::pandoc.table(caption="Study 1: Number of unique IDs per condition by state")


s1 |> group_by(refClass,calc) |> 
    rename("Reference Class" = refClass) |>
    summarise(n=n_distinct(id)) |> 
    pivot_wider(names_from=calc,values_from=n) |>
    pander::pandoc.table(caption="Study 1: Number of unique IDs per condition by calculator use")

prop.table(xtabs(~refClass,s1)) |> kable()
prop.table(xtabs(~refClass+calc,s1)) |> kable()
prop.table(xtabs(~refClass+state,s1)) |> kable()


```







### Study 2 - Subject counts 
```{r}


s2_long |> group_by(refClass) |>
    rename("Reference Class" = refClass) |>
    summarise(n=n_distinct(id)) |> 
    pander::pandoc.table(caption="Study 2: Number of unique IDs per condition")

s2_long |> group_by(refClass,calc) |>
    rename("Reference Class" = refClass) |>
    mutate(calc=case_when(calc=="Calculator" ~ "Used Calculator",
                        calc=="No Calculator" ~ "No Calculator")) |>
    summarise(n=n_distinct(id)) |>
    pivot_wider(names_from=calc,values_from=n) |>
    pander::pandoc.table(caption="Study 2: Number of unique IDs per condition by calculator use")


prop.table(xtabs(~refClass,s2_long)) |> kable()
prop.table(xtabs(~refClass+state,s2_long))
prop.table(xtabs(~refClass+calc,
s2_long |> mutate(calc=case_when(calc=="Calculator" ~ "Used Calculator",
                      calc=="No Calculator" ~ "No Calculator")))) |> kable()
```



## Performance

### Study 1

```{r}
#| fig-width: 12
#| fig-height: 8

s1_agg <- s1 |> 
    filter(appliance !="Total kWh") |> 
    group_by(id,refClass,state,block,plan,calc,edu,pct_goal) |> 
    summarise(total_kWh = sum(value),orig_kWh=sum(family), 
                pct_change = round((orig_kWh-total_kWh)/orig_kWh,3), 
                n_change = sum(value!=family),
                state_p_dif=mean(state_p_dif),
                state_f_dif=mean(state_f_dif),
                n_less_avg = sum(less_avg),
                duration=first(Duration__in_seconds_)) |> 
    mutate(matched_goal = (pct_change == pct_goal), 
                error = pct_change - pct_goal,
                abs_error = abs(error),
                close_match = abs_error <= 0.03)

s1_agg4 <- s1_agg |> group_by(id,refClass) |> 
    summarise(mg=sum(matched_goal),n=n(), pct=mg/n) 


# overall pct of subjects who matched their goal
s1_agg4 |> ungroup() |>
    summarise(
    mean = mean(pct),
    sd = sd(pct),
    n = n(),
    se=sd(pct)/sqrt(n)
) |> pander::pandoc.table(caption="Study 1: Proportion of participants who matched their goal overall")

# proportion matching vs close match

s1_agg |> pivot_longer(c(matched_goal,close_match),names_to="match_type",values_to="match") |> 
    group_by(id,match_type) |>
    summarise(mg=sum(match),n=n(), pct=mg/n) |>
    group_by(match_type) |>
    summarise(
    mean = mean(pct),
    sd = sd(pct),
    n = n(),
    se=sd(pct)/sqrt(n)
) |> pander::pandoc.table(caption="Study 1: Proportion of participants who matched their goal or were within 3% of their goal")





# refClass
s1_agg4 |> 
group_by(refClass) |> 
summarise(
    mean = mean(pct),
    sd = sd(pct),
    n = n(),
    se=sd(pct)/sqrt(n)
) |> pander::pandoc.table(caption="Study 1: Proportion of participants who matched their goal by condition")


```



### Study 2

```{r}

s2_agg1 <- s2_long |> 
  filter(appliance != "TOTAL") |> 
  group_by(id, state,refClass,pct,pct_goal,plan,rounded) |> 
  summarise(
    total_kWh = sum(value),
    orig_kWh = sum(family),
    pct_change = round((orig_kWh - total_kWh) / orig_kWh, 3),
    state_dif = mean(state_dif),
    .groups = "drop"
  ) |>
  mutate(matched_goal = (pct_change == pct),
  close_match = abs(pct_change-pct)<.03)

s2_agg4 <- s2_agg1|> group_by(id,refClass) |> 
  summarise(mg=sum(matched_goal),n=n(), pct=mg/n) 


# overall pct of subjects who matched their goal
s2_agg4 |> ungroup() |>
    summarise(
    mean = mean(pct),
    sd = sd(pct),
    n = n(),
    se=sd(pct)/sqrt(n)
) |> pander::pandoc.table(caption="Study 2: Proportion of participants who matched their goal overall")

# proportion matching vs close match

s2_agg1 |> pivot_longer(c(matched_goal,close_match),names_to="match_type",values_to="match") |> 
    group_by(id,match_type) |>
    summarise(mg=sum(match),n=n(), pct=mg/n) |>
    group_by(match_type) |>
    summarise(
    mean = mean(pct),
    sd = sd(pct),
    n = n(),
    se=sd(pct)/sqrt(n)
) |> pander::pandoc.table(caption="Study 2: Proportion of participants who matched their goal or were within 3% of their goal")



# refClass only 
s2_agg4 |> 
    group_by(refClass) |> 
    summarise(
    mean = mean(pct),
    sd = sd(pct),
    n = n(),
    se=sd(pct)/sqrt(n)
) |> pander::pandoc.table(caption="Study 2: Proportion of participants who matched their goal by condition")


# rounded only

s2_agg1 |> group_by(id,rounded) |> 
  summarise(mg=sum(matched_goal),n=n(), pct=mg/n) |> 
    group_by(rounded) |>
    summarise(
    mean = mean(pct),
    sd = sd(pct),
    n = n(),
    se=sd(pct)/sqrt(n)
) |> pander::pandoc.table(caption="Study 2: Proportion of participants who matched their goal by rounding condition")


# pct_goal only

s2_agg1 |> group_by(id,pct_goal) |> 
  summarise(mg=sum(matched_goal),n=n(), pct=mg/n) |> 
    group_by(pct_goal) |>
    summarise(
    mean = mean(pct),
    sd = sd(pct),
    n = n(),
    se=sd(pct)/sqrt(n)
) |> pander::pandoc.table(caption="Study 2: Proportion of participants who matched their goal by goal condition")



# refClass x rounded

s2_agg1 |> group_by(id, refClass,rounded) |> 
  summarise(mg=sum(matched_goal),n=n(), pct=mg/n) |> 
    group_by(refClass,rounded) |>
    summarise(
    mean = mean(pct),
    sd = sd(pct),
    n = n(),
    se=sd(pct)/sqrt(n)
) |> pander::pandoc.table(caption="Study 2: Proportion of participants who matched their goal by condition and rounding")
  


# refClass x pct_goal

s2_agg1 |> group_by(id, refClass,pct_goal) |> 
  summarise(mg=sum(matched_goal),n=n(), pct=mg/n) |> 
    group_by(refClass,pct_goal) |>
    summarise(
    mean = mean(pct),
    sd = sd(pct),
    n = n(),
    se=sd(pct)/sqrt(n)
) |> pander::pandoc.table(caption="Study 2: Proportion of participants who matched their goal by condition and goal")



# pct_goal x rounded

s2_agg1 |> group_by(id, pct_goal,rounded) |> 
  summarise(mg=sum(matched_goal),n=n(), pct=mg/n) |> 
    group_by(pct_goal,rounded) |>
    summarise(
    mean = mean(pct),
    sd = sd(pct),
    n = n(),
    se=sd(pct)/sqrt(n)
) |> pander::pandoc.table(caption="Study 2: Proportion of participants who matched their goal by goal and rounding")



# pct_goal x rounded x refClass

s2_agg1 |> group_by(id, pct_goal,rounded,refClass) |> 
  summarise(mg=sum(matched_goal),n=n(), pct=mg/n) |> 
    group_by(pct_goal,rounded,refClass) |>
    summarise(
    mean = mean(pct),
    sd = sd(pct),
    n = n(),
    se=sd(pct)/sqrt(n)
) |> pander::pandoc.table(caption="Study 2: Proportion of participants who matched their goal by goal, rounding, and condition")


```



## Analysis

### Study 1

```{r}

# binomial regression on trial level data

s1_br <- brm(
    matched_goal ~ refClass + (1|id),
    data = s1_agg,
    family = bernoulli(),
    cores=4,
    iter=2000,
    control = list(adapt_delta = 0.99),
    file=paste0(here::here("data/model_cache",'s1_br.rds')),
    )

summary(s1_br)

mr_s1 <- as.data.frame(describe_posterior(s1_br, centrality = "Mean"))[, c(1,2,4,5,6)]
colnames(mr_s1) <- c("Term", "Estimate","95% CrI Lower", "95% CrI Upper", "pd")

intercept <- mr_s1$Estimate[mr_s1$Term == "b_Intercept"]

 mr_s1 |>
    mutate(Term = stringr::str_remove(Term, "b_")) |>
    mutate(across(c("Estimate", "95% CrI Lower", "95% CrI Upper"), 
                    \(x) if_else(Term == "Intercept", plogis(x), plogis(x + intercept)))) |>
    mutate(across(where(is.numeric), \(x) round(x, 3))) |>
    mutate(Term = if_else(Term == "Intercept", "Intercept (kWh)", Term)) |>
    tibble::remove_rownames() |>
    kable(booktabs = TRUE)


s1_br2 <- brm(
    close_match ~ refClass + (1|id) + (1|state),
    data = s1_agg,
    family = bernoulli(),
    cores=4,
    iter=2000,
    control = list(adapt_delta = 0.99),
    file=paste0(here::here("data/model_cache",'s1_br2.rds')),
    )
summary(s1_br2)

s1_br2 |> emmeans(~refClass, type="response")



s1_agg <- s1 |> 
    filter(appliance !="Total kWh") |> 
    group_by(id,refClass,state,block,plan,calc,edu,pct_goal) |> 
    summarise(total_kWh = sum(value),orig_kWh=sum(family), 
                pct_change = round((orig_kWh-total_kWh)/orig_kWh,3), 
                n_change = sum(value!=family),
                state_p_dif=mean(state_p_dif),
                state_f_dif=mean(state_f_dif),
                n_less_avg = sum(less_avg),
                duration=first(Duration__in_seconds_)) |> 
    mutate(matched_goal = (pct_change == pct_goal), 
                error = pct_change - pct_goal,
                abs_error = abs(error),
                close_match = abs_error <= 0.03) |>
    ungroup() |> # Add ungroup here
    mutate(
        accuracy_level = factor(
            case_when(
                abs_error <= 0.01 ~ "1% or less",
                abs_error <= 0.05 ~ "5% or less",
                abs_error <= 0.10 ~ "10% or less",
                TRUE ~ "Greater than 10%"  # Capture all remaining cases
            ), 
            levels = c("1% or less", "5% or less", "10% or less", "Greater than 10%"),
            ordered = TRUE
        )
    )


```

## Ordinal Regression alternative

```{r}

s1_agg <- s1 |> 
    filter(appliance !="Total kWh") |> 
    group_by(id,refClass,state,block,plan,calc,edu,pct_goal) |> 
    summarise(total_kWh = sum(value),orig_kWh=sum(family), 
                pct_change = round((orig_kWh-total_kWh)/orig_kWh,3), 
                n_change = sum(value!=family),
                state_p_dif=mean(state_p_dif),
                state_f_dif=mean(state_f_dif),
                n_less_avg = sum(less_avg),
                duration=first(Duration__in_seconds_)) |> 
    mutate(matched_goal = (pct_change == pct_goal), 
                error = pct_change - pct_goal,
                abs_error = abs(error),
                close_match = abs_error <= 0.03) |>
    ungroup() |> # Add ungroup here
        mutate(
            accuracy_level = factor(
                case_when(
                    abs_error == 0.00 ~ "Exact match",
                    abs_error <= 0.02 ~ "0.01-2% error",
                    abs_error <= 0.10 ~ "2.01-15% error",
                    TRUE ~ "Over 15% error"  # Capture all remaining cases
                ), 
                levels = c("Exact match", "0.01-2% error", "2.01-15% error", "Over 15% error"),
                ordered = TRUE
            )
        )
    # mutate(
    #     accuracy_level = factor(
    #         case_when(
    #             abs_error <= 0.01 ~ "1% or less",
    #             abs_error <= 0.05 ~ "5% or less",
    #             abs_error <= 0.10 ~ "10% or less",
    #             TRUE ~ "Greater than 10%"  # Capture all remaining cases
    #         ), 
    #         levels = c("1% or less", "5% or less", "10% or less", "Greater than 10%"),
    #         ordered = TRUE
    #     )
    # )

# plot accuracy level by refClass

s1_agg |> 
        mutate(
            accuracy_level = factor(
                case_when(
                    abs_error == 0.00 ~ "Exact match",
                    abs_error <= 0.02 ~ "0.01-2% error",
                    abs_error <= 0.10 ~ "2.01-15% error",
                    TRUE ~ "Over 15% error"  # Capture all remaining cases
                ), 
                levels = c("Exact match", "0.01-2% error", "2.01-15% error", "Over 15% error"),
                ordered = TRUE
            )
        ) |>
    ggplot(aes(x=refClass,fill=accuracy_level)) +
    geom_bar(position="fill") +
    labs(title="Study 1: Accuracy Level by Reference Class",
        x="Reference Class",
        y="Proportion",
        fill="Accuracy Level") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))


ordinal_model_s1 <- brm(
  accuracy_level ~ refClass + (1|id) + (1|state),
  data = s1_agg,
  family = cumulative("logit"),
  cores = 4,
  iter = 2000,
  control = list(adapt_delta = 0.99), # Recommended for ordinal models
  prior = c(prior(normal(0, 2), class = "Intercept"),  # Priors for thresholds
            prior(normal(0, 1.5), class = "b")), # Priors for predictors
  file = paste0(here::here("data/model_cache",'s1_ordinal3.rds')) # Cache for efficiency
)


pred_summary <- ordinal_model_s1 |>
    epred_draws(newdata = data.frame(refClass = c("kWh", "Percentage", "USD")),
                ndraws = 1000, re_formula = NA) |>
    group_by(refClass, .category) |>
    summarise(
        mean_prob = mean(.epred),
        lower_ci = quantile(.epred, 0.025),
        upper_ci = quantile(.epred, 0.975)
    )
pred_summary |> pander::pandoc.table(caption="Study 1: Predicted probabilities of accuracy level by reference class")

ggplot(pred_summary, 
       aes(x = refClass, y = mean_prob, fill = .category)) +
  geom_col(position = "stack") +
  geom_errorbar(aes(ymin = lower_ci, ymax = upper_ci), 
                position = position_stack()) +
  labs(x = "Reference Class", 
       y = "Predicted Probability",
       fill = "Accuracy Level",
       title = "Predicted Probabilities of Accuracy Levels by Reference Class") +
  theme_minimal() +
  scale_fill_brewer(palette = "Blues")

# Calculate cumulative probabilities
cum_probs <- pred_summary |>
  group_by(refClass) |>
  arrange(refClass, .category) |>
  mutate(
    cum_prob = cumsum(mean_prob),
    cum_lower = cumsum(lower_ci),
    cum_upper = cumsum(upper_ci)
  )

ggplot(cum_probs, 
    aes(x = refClass, y = cum_prob, color = .category)) +
geom_point(size = 3,position=position_dodge()) +
geom_errorbar(aes(ymin = cum_lower, ymax = cum_upper), 
            width = 0.2,position=position_dodge()) +
labs(x = "Reference Class",
    y = "Cumulative Probability",
    color = "Accuracy Level",
    title = "Cumulative Probabilities of Accuracy Levels") +
theme_minimal() +
scale_color_brewer(palette = "Blues") 

summary_table <- pred_summary |>
  pivot_wider(
    names_from = .category,
    values_from = c(mean_prob, lower_ci, upper_ci)
  ) |>
  kable(digits = 3)

print(summary_table)

# Convert log-odds to odds ratios
posterior_samples <- as.data.frame(ordinal_model_s1)
odds_ratios <- data.frame(
  Percentage_vs_kWh = exp(posterior_samples$b_refClassPercentage),
  USD_vs_kWh = exp(posterior_samples$b_refClassUSD)
)

# Calculate summary statistics
odds_ratio_summary <- data.frame(
  comparison = c("Percentage vs kWh", "USD vs kWh"),
  odds_ratio = c(mean(odds_ratios$Percentage_vs_kWh),
                 mean(odds_ratios$USD_vs_kWh)),
  ci_lower = c(quantile(odds_ratios$Percentage_vs_kWh, 0.025),
               quantile(odds_ratios$USD_vs_kWh, 0.025)),
  ci_upper = c(quantile(odds_ratios$Percentage_vs_kWh, 0.975),
               quantile(odds_ratios$USD_vs_kWh, 0.975))
)


# Plot predicted probabilities
ggplot(pred_summary, aes(x = refClass, y = mean_prob, fill = .category)) +
  geom_bar(stat = "identity", position = position_dodge()) +
  geom_errorbar(aes(ymin = lower_ci, ymax = upper_ci),
                position = position_dodge(width = 0.9), width = 0.2) +
  labs(y = "Predicted Probability", x = "Reference Class", fill = "Accuracy Level") +
  ggtitle("Study 1: Predicted Probabilities of Accuracy Level by Reference Class") +
  theme_minimal()













```


#### Frequentist alternative

```{r}
s1_glm <- glm(matched_goal ~ refClass, data = s1_agg, family = binomial())
summary(s1_glm)

# Odds Ratios and Confidence Intervals
exp(cbind(Odds_Ratio = coef(s1_glm), confint(s1_glm)))

# Chi-Square Test for Proportions in Study 1
s1_table <- table(s1_agg$refClass, s1_agg$matched_goal)
chisq.test(s1_table)

```

### Study 2

```{r}

# binomial regression on trial level data

s2_br_3 <- brm(
    matched_goal ~ refClass+rounded+pct_goal + (1|id) + (1|state),
    data = s2_agg1,
    family = bernoulli(),
    cores=4,
    iter=2000,
    control = list(adapt_delta = 0.99),
    file=paste0(here::here("data/model_cache",'s2_br_3.rds')),
    )

summary(s2_br_3)


mr_s2_3 <- as.data.frame(describe_posterior(s2_br_3, centrality = "Mean"))[, c(1,2,4,5,6)]
colnames(mr_s2_3) <- c("Term", "Estimate","95% CrI Lower", "95% CrI Upper", "pd")


 mr_s2_3 |>
    mutate(Term = stringr::str_remove(Term, "b_")) |>
    mutate(across(where(is.numeric), \(x) round(x, 3))) |>
    mutate(Term = if_else(Term == "Intercept", "Intercept (kWh)", Term)) |>
    tibble::remove_rownames() |>
    kable(booktabs = TRUE)



s2_br2_3 <- brm(
    close_match ~ refClass+rounded+pct_goal + (1|id) + (1|state),
    data = s2_agg1,
    family = bernoulli(),
    cores=4,
    iter=2000,
    control = list(adapt_delta = 0.99),
    file=paste0(here::here("data/model_cache",'s2_br2_3.rds')),
    )

summary(s2_br2_3)

#s2_br2_3 |> emmeans(~refClass, type="response")

mr_s2_3_2 <- as.data.frame(describe_posterior(s2_br2_3, centrality = "Mean"))[, c(1,2,4,5,6)]
colnames(mr_s2_3_2) <- c("Term", "Estimate","95% CrI Lower", "95% CrI Upper", "pd")


mr_s2_3_2 |>
    mutate(Term = stringr::str_remove(Term, "b_")) |>
    mutate(across(where(is.numeric), \(x) round(x, 3))) |>
    mutate(Term = if_else(Term == "Intercept", "Intercept (kWh)", Term)) |>
    tibble::remove_rownames() |>
    kable(booktabs = TRUE)

```



```{r}

s2_glm <- glm(matched_goal ~ refClass + rounded + pct_goal, data = s2_agg1, family = binomial())
summary(s2_glm)

# Odds Ratios and Confidence Intervals
exp(cbind(Odds_Ratio = coef(s2_glm), confint(s2_glm)))

# Chi-Square Test for Proportions in Study 2
s2_table <- table(s2_agg1$refClass, s2_agg1$matched_goal)
chisq.test(s2_table)

```